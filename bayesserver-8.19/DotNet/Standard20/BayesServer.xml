<?xml version="1.0"?>
<doc>
  <assembly>
    <name>BayesServer</name>
  </assembly>
  <members>
    <member name="T:BayesServer.ArcReversal">
      <summary>
            Contains methods to reverse the direction of a <see cref="T:BayesServer.Link" />, known as arc reversal.
            </summary>
    </member>
    <member name="M:BayesServer.ArcReversal.Reverse(BayesServer.Link)">
      <summary>
            Reverse the direction of a <see cref="T:BayesServer.Link" /> (known as arc reversal).
            </summary>
      <param name="link">The link whose direction should be changed.</param>
    </member>
    <member name="T:BayesServer.Bounds">
      <summary>
            Stores the position and size of an element.
            </summary>
    </member>
    <member name="M:BayesServer.Bounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the Bounds struct.
            </summary>
      <param name="x">The x-axis value of the left side of the element.</param>
      <param name="y">The y-axis value of the top side of the element.</param>
      <param name="width">The width of the element.</param>
      <param name="height">The height of the element.</param>
    </member>
    <member name="P:BayesServer.Bounds.X">
      <summary>
            Gets or sets the x-axis value of the left side of the element.
            </summary>
    </member>
    <member name="P:BayesServer.Bounds.Y">
      <summary>
            Gets or sets the y-axis value of the top side of the element.
            </summary>
    </member>
    <member name="P:BayesServer.Bounds.Width">
      <summary>
            Gets or sets the width of the element.
            </summary>
    </member>
    <member name="P:BayesServer.Bounds.Height">
      <summary>
            Gets or sets the height of the element.
            </summary>
    </member>
    <member name="T:BayesServer.Cancellation">
      <summary>
            Class for canceling long running operations.
            </summary>
      <seealso cref="T:BayesServer.ICancellation" />
    </member>
    <member name="P:BayesServer.Cancellation.Cancel">
      <inheritdoc />
    </member>
    <member name="T:BayesServer.CLGaussian">
      <summary>
            Represents a Conditional Linear Gaussian probability distribution.
            </summary>
      <remarks>
            The distribution contains a <see cref="T:BayesServer.Table" /> distribution which represents any
            discrete combinations, and for each combination there exists a multivariate Gaussian distribution and weight/regression coefficients.
            Note that head variables are those that appear to the left of the bar in the expression P(A|B) and tail variables are those to the right.
            </remarks>
    </member>
    <member name="M:BayesServer.CLGaussian.ToString">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CLGaussian.Reset">
      <summary>
            Resets all mean, covariance and weight entries to zero.
            </summary>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(System.Collections.Generic.IList{BayesServer.VariableContext})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the variables specified in <paramref name="variableContexts" />.
            </summary>
      <remarks>
            Each variable, if it belongs to a temporal node can have an associated time.  A variable is also marked as either head or tail.
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
      <param name="variableContexts">The variable contexts containing the distribution variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variableContexts" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(System.Collections.Generic.IList{BayesServer.VariableContext},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the variables specified in <paramref name="variableContexts" />.
            </summary>
      <remarks>
            Each variable, if it belongs to a temporal node can have an associated time.  A variable is also marked as either head or tail.
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
      <param name="variableContexts">The variable contexts containing the distribution variables.</param>
      <param name="headTail">Overrides the Head or Tail value found in each <see cref="T:BayesServer.VariableContext" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variableContexts" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.VariableContext[],System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with <paramref name="count" /> variables specified in <paramref name="variableContexts" />.
            </summary>
      <remarks>
            Each variable, if it belongs to a temporal node can have an associated time.  A variable is also marked as either head or tail.
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
      <param name="variableContexts">The variable contexts containing the distribution variables.</param>
      <param name="count">The number of items to include from <paramref name="variableContexts" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variableContexts" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.VariableContext[],System.Int32,BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with <paramref name="count" /> variables specified in <paramref name="variableContexts" />.
            </summary>
      <remarks>
            Each variable, if it belongs to a temporal node can have an associated time.  A variable is also marked as either head or tail.
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
      <param name="variableContexts">The variable contexts containing the distribution variables.</param>
      <param name="count">The number of items to include from <paramref name="variableContexts" />.</param>
      <param name="headTail">Overrides the Head or Tail value found in each <see cref="T:BayesServer.VariableContext" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variableContexts" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.Node,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the variables of a single node at the specified time.  Variables are assumed to be head variables.
            </summary>
      <param name="node">The node whose variables will belong to the new distribution.</param>
      <param name="time">The time for any temporal nodes/variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="node" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(System.Collections.Generic.IList{BayesServer.Variable},System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the specified variables at a particular time.  Variables are assumed to be head variables.
            </summary>
      <param name="variables">The variables for the new distribution.</param>
      <param name="time">The time for any temporal nodes/variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variables" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if an element of <paramref name="variables" /> is null or a variable does not belong to a network.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(System.Collections.Generic.IList{BayesServer.Variable},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the specified variables.
            </summary>
      <param name="variables">The variables for the new distribution.</param>
      <param name="headTail">Specifies whether the variables should be marked as Head or Tail.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variables" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if an element of <paramref name="variables" /> is null or a variable does not belong to a network.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(System.Collections.Generic.IList{BayesServer.Variable},System.Nullable{System.Int32},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the specified variables.
            </summary>
      <param name="variables">The variables for the new distribution.</param>
      <param name="time">The time for any temporal nodes/variables.</param>
      <param name="headTail">Specifies whether the variables should be marked as Head or Tail.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variables" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if an element of <paramref name="variables" /> is null or a variable does not belong to a network.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the specified variables.  Variables are assumed to be head variables.
            </summary>
      <param name="variables">The variables for the new distribution.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.TimeShift(System.Int32)">
      <summary>
            Shifts any times associated with the distribution variables by the specified number of time units.
            </summary>
      <param name="units">The number of time units to shift.  Can be negative if required.</param>
    </member>
    <member name="P:BayesServer.CLGaussian.Locked">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CLGaussian.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.Node)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with the variables of a single node.  Variables are assumed to be head variables.
            </summary>
      <param name="node">The node whose variables will belong to the new distribution.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.Variable)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with a single variable.  The variable is assumed to be a head variable.
            </summary>
      <param name="variable">The variable that will belong to the new distribution.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.VariableContext)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class from a single <see cref="T:BayesServer.VariableContext" />.
            </summary>
      <param name="variableContext">The variable context.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="variableContext" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class with a single variable at the specified time.  The variable is assumed to be a head variable.
            </summary>
      <param name="variable">The variable that will belong to the new distribution.</param>
      <param name="time">The time associated with the variable.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.CLGaussian)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class, copying the source distribution.
            </summary>
      <param name="source">The distribution to copy.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.#ctor(BayesServer.CLGaussian,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CLGaussian" /> class, copying the source distribution but shifting any times by the specified number of units.
            </summary>
      <param name="source">The distribution to copy.</param>
      <param name="timeShift">The number of units to adjust any times associated with variables.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.Copy">
      <summary>
            Creates a copy of the distribution.  The new distribution will not have an owner.
            </summary>
      <returns>A copy of this instance.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.Copy(System.Nullable{System.Int32})">
      <summary>
            Creates a copy of the distribution, and shifts any times associated with variables by the specified amount.  The new distribution will not have an owner.
            </summary>
      <param name="timeShift">The amount to shift any times present in the distribution.  Can be negative.</param>
      <returns>
            A copy of this instance, with shifted times.
            </returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(System.Int32,System.Int32)">
      <summary>
            Gets the mean of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHead">The position of the required continuous head variable.</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,BayesServer.State[])">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable)">
      <summary>
            Gets the mean value of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Gets the mean value of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable and time.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.State[])">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.VariableContext,BayesServer.State[])">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,BayesServer.StateContext[])">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.StateContext[])">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.VariableContext,BayesServer.StateContext[])">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,BayesServer.TableIterator)">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the discrete combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.TableIterator)">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the discrete combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetMean(BayesServer.VariableContext,BayesServer.TableIterator)">
      <summary>
            Gets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the discrete combination.
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The mean value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(System.Int32,System.Int32)">
      <summary>
            Gets the variance of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHead">The position of the required continuous head variable.</param>
      <returns>The variance.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,BayesServer.State[])">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable)">
      <summary>
            Gets the variance of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Gets the variance of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.State[])">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.VariableContext,BayesServer.State[])">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,BayesServer.StateContext[])">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.StateContext[])">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.VariableContext,BayesServer.StateContext[])">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,BayesServer.TableIterator)">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.TableIterator)">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetVariance(BayesServer.VariableContext,BayesServer.TableIterator)">
      <summary>
            Gets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The variance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the covariance of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHeadA">The position of the first continuous head variable.</param>
      <param name="sortedContinuousHeadB">The position of the second continuous head variable.</param>
      <returns>The covariance entry.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,BayesServer.Variable,BayesServer.State[])">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,BayesServer.Variable)">
      <summary>
            Gets the covariance of a Gaussian distribution with no discrete variables between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" />. 
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Gets the covariance of a Gaussian distribution with no discrete variables between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" />. 
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,BayesServer.Variable,BayesServer.StateContext[])">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},BayesServer.State[])">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},BayesServer.StateContext[])">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,BayesServer.State[])">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,BayesServer.StateContext[])">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,BayesServer.Variable,BayesServer.TableIterator)">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},BayesServer.TableIterator)">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,BayesServer.TableIterator)">
      <summary>
            Gets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The covariance value.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets the weight (regression coefficient) of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHead">The position of the required continuous head variable.</param>
      <param name="sortedContinuousTail">The position of the required continuous tail variable.</param>
      <returns>The weight / regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,BayesServer.Variable,BayesServer.State[])">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},BayesServer.State[])">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.VariableContext,BayesServer.VariableContext,BayesServer.State[])">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable and time (if any) from T in the expression P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,BayesServer.Variable,BayesServer.StateContext[])">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,BayesServer.Variable)">
      <summary>
            Gets the weight/regression coefficient of a Gaussian distribution with no discrete variables between the <paramref name="continuousTail" /> and <paramref name="continuousHead" />. 
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},BayesServer.StateContext[])">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Gets the weight/regression coefficient of a Gaussian distribution with no discrete variables between the <paramref name="continuousTail" /> and <paramref name="continuousHead" />. 
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.VariableContext,BayesServer.VariableContext,BayesServer.StateContext[])">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable and time (if any) from T in the expression P(H|T).</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,BayesServer.Variable,BayesServer.TableIterator)">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},BayesServer.TableIterator)">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.GetWeight(BayesServer.VariableContext,BayesServer.VariableContext,BayesServer.TableIterator)">
      <summary>
            Gets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
      <returns>The weight/regression coefficient.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(System.Int32,System.Int32,System.Double)">
      <summary>
            Sets the mean value of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHead">The position of the required continuous head variable.</param>
      <param name="value">The mean value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Double,BayesServer.State[])">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.State[])">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The mean value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.VariableContext,System.Double,BayesServer.State[])">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Double)">
      <summary>
            Sets the mean value of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Nullable{System.Int32},System.Double)">
      <summary>
            Sets the mean value of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The mean value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The mean value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.VariableContext,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the <paramref name="discrete" /> combination.
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the discrete combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the discrete combination.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The mean value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetMean(BayesServer.VariableContext,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the mean value of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable for the discrete combination.
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The mean value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Sets the covariance value of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHeadA">The position of the first continuous head variable.</param>
      <param name="sortedContinuousHeadB">The position of the second continuous head variable.</param>
      <param name="value">The covariance value to copy.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,BayesServer.Variable,System.Double,BayesServer.State[])">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.State[])">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The covariance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,System.Double,BayesServer.State[])">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,BayesServer.Variable,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The covariance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double)">
      <summary>
            Sets the covariance of a Gaussian distribution with no discrete variables between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /></summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The covariance value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,BayesServer.Variable,System.Double)">
      <summary>
            Sets the covariance of a Gaussian distribution with no discrete variables between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /></summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,System.Double)">
      <summary>
            Sets the covariance of a Gaussian distribution with no discrete variables between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" />.
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,BayesServer.Variable,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeA">The time of the first continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousHeadB">A second continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="timeB">The time of the second continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The covariance value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetCovariance(BayesServer.VariableContext,BayesServer.VariableContext,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the covariance of the Gaussian distribution between <paramref name="continuousHeadA" /> and <paramref name="continuousHeadB" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHeadA">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="continuousHeadB">A second continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The covariance value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(System.Int32,System.Int32,System.Double)">
      <summary>
            Sets the variance value of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHead">The position of the required continuous head variable.</param>
      <param name="value">The variance value to set.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Double,BayesServer.State[])">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.State[])">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The variance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.VariableContext,System.Double,BayesServer.State[])">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Double)">
      <summary>
            Sets the variance of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Nullable{System.Int32},System.Double)">
      <summary>
            Sets the variance of a Gaussian distribution with no discrete variables for the specified <paramref name="continuousHead" /> variable.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The variance value.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The variance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.VariableContext,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H) or P(H|T).</param>
      <param name="time">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="value">The variance value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetVariance(BayesServer.VariableContext,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the variance of the Gaussian distribution for the specified <paramref name="continuousHead" /> variable
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and time (if any) from H in the expression P(H) or P(H|T).</param>
      <param name="value">The variance value.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution at the specified <paramref name="index" /> in the <see cref="T:BayesServer.Table" /> of discrete combinations.
            </summary>
      <param name="index">The index into the discrete table of combinations.  If no discrete variables are present in the distribution, index will always be 0.</param>
      <param name="sortedContinuousHead">The position of the required continuous head variable.</param>
      <param name="sortedContinuousTail">The position of the required continuous tail variable.</param>
      <param name="value">The weight to copy.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,BayesServer.Variable,System.Double,BayesServer.State[])">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.State[])">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.VariableContext,BayesServer.VariableContext,System.Double,BayesServer.State[])">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and associated time (if any) from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable and associated time (if any) from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,BayesServer.Variable,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,BayesServer.Variable,System.Double)">
      <summary>
            Sets the weight/regression coefficient of a Gaussian distribution with no discrete variables between the <paramref name="continuousTail" /> and <paramref name="continuousHead" />.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double)">
      <summary>
            Sets the weight/regression coefficient of a Gaussian distribution with no discrete variables between the <paramref name="continuousTail" /> and <paramref name="continuousHead" />.
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="value">The weight/regression coefficient.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.VariableContext,BayesServer.VariableContext,System.Double,BayesServer.StateContext[])">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and associated time (if any) from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable and associated time (if any) from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="discrete">The discrete combination (mixture).  Can be empty if this distribution has no discrete variables (i.e. the Gaussian is not a mixture of Gaussians).</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,BayesServer.Variable,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.Variable,System.Nullable{System.Int32},System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable from H in the expression P(H|T).</param>
      <param name="timeHead">The time of the continuous head variable, or null if not a temporal variable.</param>
      <param name="continuousTail">A continuous tail variable from T in the expression P(H|T).</param>
      <param name="timeTail">The time of the continuous tail variable, or null if not a temporal variable.</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.SetWeight(BayesServer.VariableContext,BayesServer.VariableContext,System.Double,BayesServer.TableIterator)">
      <summary>
            Sets the weight/regression coefficient of the Gaussian distribution between the <paramref name="continuousTail" /> and <paramref name="continuousHead" /> 
            for a particular discrete combination (mixture).
            </summary>
      <param name="continuousHead">A continuous head variable and associated time (if any) from H in the expression P(H|T).</param>
      <param name="continuousTail">A continuous tail variable and associated time (if any) from T in the expression P(H|T).</param>
      <param name="value">The weight/regression coefficient.</param>
      <param name="iterator">The discrete combination (mixture) identified by the position of the iterator.</param>
    </member>
    <member name="P:BayesServer.CLGaussian.SortedVariables">
      <summary>
            Gets the collection of variables in the distribution, sorted by time (which may be null) and the order in which variables were created.
            </summary>
      <value>Variables sorted by time and the order in which variables were created.</value>
    </member>
    <member name="P:BayesServer.CLGaussian.SortedContinuousHead">
      <summary>
            Gets the collection of continuous head variables in the distribution, sorted by time (which may be null) and the order in which variables were created.
            </summary>
      <remarks>Note that head variables are those that appear to the left of the bar in the expression P(A|B) and tail variables are those to the right.</remarks>
      <value>Continuous head variables sorted by time, and the order in which variables were created.</value>
      <seealso cref="T:BayesServer.VariableMap" />
    </member>
    <member name="P:BayesServer.CLGaussian.SortedContinuousTail">
      <summary>
            Gets the collection of continuous tail variables in the distribution, sorted by time (which may be null) and the order in which variables were created.
            </summary>
      <remarks>Note that head variables are those that appear to the left of the bar in the expression P(A|B) and tail variables are those to the right.</remarks>
      <value>Continuous tail variables sorted by time and the order in which variables were created.</value>
      <seealso cref="T:BayesServer.VariableMap" />
    </member>
    <member name="P:BayesServer.CLGaussian.Owner">
      <summary>
            Gets the current owner, if assigned to a node.  A distribution cannot be modified when it is assigned to a node.
            </summary>
      <value>The owner, or null if not assigned to a node.</value>
    </member>
    <member name="P:BayesServer.CLGaussian.Table">
      <summary>
            Gets the <see cref="T:BayesServer.Table" /> which specifies the distribution over any discrete variables.
            </summary>
      <value>The table.</value>
    </member>
    <member name="M:BayesServer.CLGaussian.CopyFrom(BayesServer.CLGaussian)">
      <summary>
            Copies the values from the <paramref name="source" /> distribution to this instance.  The variable counts between distributions must match but the variable contexts need not be equal.
            </summary>
      <param name="source">The source distribution from which values are copied.</param>
    </member>
    <member name="M:BayesServer.CLGaussian.Divide(BayesServer.IDistribution)">
      <summary>
            Creates a new distribution by dividing this instance by the <paramref name="subset" />.  Also known as the complement.
            </summary>
      <remarks>If the resulting distribution were subsequently multiplied by <paramref name="subset" />, the result would be equivalent to this instance.</remarks>
      <param name="subset">The subset to divide by.</param>
      <returns>The new distribution (complement).</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="subset" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">If subset is not a subset of variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.Divide(BayesServer.CLGaussian)">
      <summary>
            Creates a new distribution by dividing this instance by the <paramref name="subset" />.  Also known as the complement.
            </summary>
      <remarks>If the resulting distribution were subsequently multiplied by <paramref name="subset" />, the result would be equivalent to this instance.</remarks>
      <param name="subset">The subset to divide by.</param>
      <returns>The new distribution (complement).</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="subset" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">If subset is not a subset of variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.InstantiateDiscrete(System.Nullable{System.Int32}[])">
      <summary>
            Instantiates discrete variables.
            </summary>
      <param name="discreteValues">A discrete value (or null) for each discrete variable in the Gaussian table.</param>
      <returns>The instantiated distribution.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.Instantiate(System.Nullable{System.Double}[])">
      <summary>
            Calculates the distribution which results from instantiating a number of variables.
            </summary>
      <remarks>
        <paramref name="values" /> should contain one entry for each <seealso cref="T:BayesServer.VariableContext" /> in
            the distribution, however entries can be null.
            </remarks>
      <param name="values">The instantiated values. Entries can be null.</param>
      <returns>The instantiated distribution.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.InstantiateHeads(System.Nullable{System.Double}[],System.Double[])">
      <summary>
            Instantiates continuous head variable contexts.
            </summary>
      <param name="headValues">The value (or null) for each continuous head variable context.</param>
      <param name="logPdf">Optional array of length <see cref="P:BayesServer.Table.Count" /> that is filled with the logged pdf values, useful when pdf values are zero.</param>
      <returns>The instantiated distribution.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.InstantiateTails(System.Nullable{System.Double}[])">
      <summary>
            Calculates the distribution which results from instantiating continuous tail variables.
            </summary>
      <param name="tailValues">The value (or null) for each continuous tail.</param>
      <returns>The instantiated distribution.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.Instantiate(BayesServer.Variable,System.Double)">
      <summary>
            Calculates the distribution which results from instantiating a particular variable.
            </summary>
      <param name="variable">The variable to instantiate.</param>
      <param name="value">The instantiated value.</param>
      <returns>The instantiated distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.Instantiate(BayesServer.Variable,System.Double,System.Nullable{System.Int32})">
      <summary>
            Calculates the distribution which results from instantiating a particular variable at a specified time.
            </summary>
      <param name="variable">The variable to instantiate.</param>
      <param name="value">The instantiated value.</param>
      <param name="time">The time associated with the variable. Can be null.</param>
      <returns>The instantiated distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.InstantiateHead(BayesServer.Variable,System.Double,System.Nullable{System.Int32})">
      <summary>
            Calculates the distribution which results from instantiating a particular continuous head variable at a specified time.
            </summary>
      <param name="variable">The variable to instantiate.</param>
      <param name="value">The instantiated value.</param>
      <param name="time">The time associated with the variable. Can be null.</param>
      <returns>The instantiated distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.InstantiateHead(BayesServer.Variable,System.Double,System.Nullable{System.Int32},System.Double[])">
      <summary>
            Calculates the distribution which results from instantiating a particular continuous head variable at a specified time.
            </summary>
      <param name="variable">The variable to instantiate.</param>
      <param name="value">The instantiated value.</param>
      <param name="time">The time associated with the variable. Can be null.</param>
      <param name="logPdf">A buffer of length <see cref="P:BayesServer.Table.Count" />that is filled with the log of the pdf values calculated during instantiation. Can be null.</param>
      <returns>The instantiated distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.InstantiateHead(System.Double[],System.Double[])">
      <summary>
            Instantiates all continuous head variable contexts.
            </summary>
      <param name="headValues">The values for the continuous head variable contexts.</param>
      <param name="logPdf">Optional array of length <see cref="P:BayesServer.Table.Count" /> that is filled with the logged pdf values, useful when pdf values are zero.</param>
      <returns>The instantiated distribution.</returns>
    </member>
    <member name="M:BayesServer.CLGaussian.Marginalize(BayesServer.IDistribution)">
      <summary>
            Marginalizes (integrates) the <paramref name="superset" /> into this instance.  
            </summary>
      <param name="superset">A distribution whose variables form a superset of the variables in this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.Marginalize(BayesServer.IDistribution,BayesServer.PropagationMethod)">
      <summary>
            Marginalizes (integrates) the <paramref name="superset" /> into this instance.  
            </summary>
      <param name="superset">A distribution whose variables form a superset of the variables in this instance.</param>
      <param name="propagation">The propagation method to use during marginalization.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.Marginalize(BayesServer.CLGaussian)">
      <summary>
            Marginalizes (sums/integrates) the <paramref name="superset" /> into this instance.  
            </summary>
      <param name="superset">A <see cref="T:BayesServer.CLGaussian" /> whose variables form a superset of the variables in this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.MarginalizeTo(BayesServer.Table)">
      <summary>
            Marginalizes (sums/integrates) out all continuous variables from this instance into the specified table.
            </summary>
      <param name="table">A <see cref="T:BayesServer.Table" /> whose variables form a subset of discrete variables in this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.MarginalizeTo(BayesServer.Table,BayesServer.PropagationMethod)">
      <summary>
            Marginalizes (sums/integrates) out all continuous variables from this instance into the specified table.
            </summary>
      <param name="table">A <see cref="T:BayesServer.Table" /> whose variables form a subset of discrete variables in this instance.</param>
      <param name="propagation">The propagation method to use during marginalization.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.Multiply(BayesServer.CLGaussian)">
      <summary>
            Multiplies this instance by another <see cref="T:BayesServer.CLGaussian" /> distribution.
            </summary>
      <param name="gaussian">The distribution to combine.</param>
      <returns>The combined distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="gaussian" /> is null.</exception>
    </member>
    <member name="M:BayesServer.CLGaussian.Multiply(BayesServer.IDistribution)">
      <summary>
            Multiplies this instance by another distribution.
            </summary>
      <param name="distribution">The distribution to combine.</param>
      <returns>The combined distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="distribution" /> is null.</exception>
    </member>
    <member name="T:BayesServer.CustomProperty">
      <summary>
            Stores a custom property.
            </summary>
    </member>
    <member name="E:BayesServer.CustomProperty.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CustomProperty.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CustomProperty" /> class.
            </summary>
      <param name="name">The name of the custom property, which must be unique per <see cref="T:BayesServer.CustomPropertyCollection" />.</param>
    </member>
    <member name="M:BayesServer.CustomProperty.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.CustomProperty" /> class.
            </summary>
      <param name="name">The name of the custom property, which must be unique per <see cref="T:BayesServer.CustomPropertyCollection" />.</param>
      <param name="value">The custom value.</param>
    </member>
    <member name="M:BayesServer.CustomProperty.Copy">
      <summary>
            Makes a copy of this instance.
            </summary>
      <returns>The copy.</returns>
    </member>
    <member name="P:BayesServer.CustomProperty.Name">
      <summary>
            Gets the name, which must be unique per <see cref="T:BayesServer.CustomPropertyCollection" />.
            </summary>
    </member>
    <member name="P:BayesServer.CustomProperty.Value">
      <summary>
            The custom property value.  E.g. an XML string.
            </summary>
    </member>
    <member name="P:BayesServer.CustomProperty.Description">
      <summary>
            An optional description for the custom property.
            </summary>
    </member>
    <member name="P:BayesServer.CustomProperty.Parent">
      <summary>
            Gets the parent collection, if set, otherwise null.
            </summary>
    </member>
    <member name="T:BayesServer.CustomPropertyCollection">
      <summary>
            Stores custom properties for a variety of objects.
            </summary>
    </member>
    <member name="P:BayesServer.CustomPropertyCollection.Owner">
      <summary>
            Gets the instance that these custom properties belong to.
            </summary>
    </member>
    <member name="P:BayesServer.CustomPropertyCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:BayesServer.CustomProperty" /> with the specified name, from the collection, or returns null if not found.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.CustomProperty" /> to return.</param>
      <returns>The <see cref="T:BayesServer.CustomProperty" /> with the specified name, or null if not found.</returns>
    </member>
    <member name="M:BayesServer.CustomPropertyCollection.ClearItems">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CustomPropertyCollection.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CustomPropertyCollection.InsertItem(System.Int32,BayesServer.CustomProperty)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CustomPropertyCollection.MoveItem(System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.CustomPropertyCollection.SetItem(System.Int32,BayesServer.CustomProperty)">
      <inheritdoc />
    </member>
    <member name="T:BayesServer.Dag">
      <summary>
            Includes methods for testing whether a network is a Directed Acyclic Graph (DAG). 
            </summary>
      <seealso cref="M:BayesServer.Network.IsDag" />
    </member>
    <member name="M:BayesServer.Dag.IsDag(BayesServer.Network)">
      <summary>
            Determines if a network is a Directed Acyclic Graph (DAG). 
            </summary>
      <param name="network">The network to test.</param>
      <returns>
        <c>true</c> if a dag, <c>false</c> otherwise.</returns>
      <seealso cref="M:BayesServer.Network.IsDag" />
    </member>
    <member name="M:BayesServer.Dag.IsDag(BayesServer.Network,System.Collections.Generic.IEnumerable{BayesServer.Link},System.Collections.Generic.IEnumerable{BayesServer.Link})">
      <summary>
            Determines if a network is a DAG (Directed Acyclic Graph).
            </summary>
      <remarks>The test allows the exclusion of certain links, and the inclusion of extra links that have not yet been added to the network.</remarks>
      <param name="network">The network to test.</param>
      <param name="ignore">Optional links to ignore.  Can be null.</param>
      <param name="extra">Optional extra links to include. Can be null.</param>
      <returns>
        <c>true</c> if a dag, <c>false</c> otherwise.</returns>
      <seealso cref="M:BayesServer.Network.IsDag" />
    </member>
    <member name="T:BayesServer.DecomposeOptions">
      <summary>
            Options used by the <see cref="T:BayesServer.Decomposer" /> class.
            </summary>
    </member>
    <member name="E:BayesServer.DecomposeOptions.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.DecomposeOptions.Gap">
      <summary>
            The gap between decomposed nodes, used when laying out new nodes.
            </summary>
    </member>
    <member name="P:BayesServer.DecomposeOptions.NodeWidthOverride">
      <summary>
            Gets or sets a value that can be used to override the width of nodes, used when laying out new nodes.
            </summary>
      <value>Value to override node widths.</value>
    </member>
    <member name="T:BayesServer.DecomposeOutput">
      <summary>
            Contains information returned by <see cref="M:BayesServer.Decomposer.Decompose" />.
            </summary>
    </member>
    <member name="P:BayesServer.DecomposeOutput.OriginalNetwork">
      <summary>
            Gets the original network, containing nodes with multiple variables.
            </summary>
      <value>The original network.</value>
    </member>
    <member name="P:BayesServer.DecomposeOutput.DecomposedNetwork">
      <summary>
            Gets the network, which is the decomposed equivalent of the original network.
            </summary>
      <value>The decomposed network.</value>
    </member>
    <member name="M:BayesServer.DecomposeOutput.GetOriginalVariable(BayesServer.Variable)">
      <summary>
            Maps a variable in the decomposed network to the equivalent variable in the original network.
            </summary>
      <param name="decomposedVariable">The variable in the decomposed network.</param>
      <returns>The equivalent variable in the original network.</returns>
    </member>
    <member name="M:BayesServer.DecomposeOutput.GetDecomposedVariable(BayesServer.Variable)">
      <summary>
            Maps a variable in the original network to the equivalent variable in the decomposed network.
            </summary>
      <param name="networkVariable">The variable in the original network.</param>
      <returns>The equivalent variable in the decomposed network.</returns>
    </member>
    <member name="T:BayesServer.Decomposer">
      <summary>
            Contains methods to decompose nodes with multiple variables into their single variable equivalents.
            </summary>
    </member>
    <member name="M:BayesServer.Decomposer.Decompose(BayesServer.Network,BayesServer.DecomposeOptions)">
      <summary>
            Decomposes a Bayesian network containing nodes with multiple variables into its single variable node equivalent.
            </summary>
      <param name="network">The network containing nodes with multiple variables.</param>
      <param name="options">Options that govern the decomposition.</param>
      <returns>The equivalent single variable node Bayesian network.</returns>
    </member>
    <member name="T:BayesServer.Distributed.IDistributer`1">
      <typeparam name="T">Allows contextual data to be passed to the distributer by an algorithm.</typeparam>
    </member>
    <member name="M:BayesServer.Distributed.IDistributer`1.Distribute(`0)">
      <summary>
            The implementor should distribute the processing.  See the help for 
            functionality being called to
            determine what that processing should be.
            The configuration values will need to be available to the 
            distributed computation.
            </summary>
      <param name="context">
            Provides contextual information about the process/iteration being distributed.
            </param>
      <returns>The results of the distributed calculations.</returns>
    </member>
    <member name="P:BayesServer.Distributed.IDistributer`1.Configuration">
      <summary>
            Gets configuration name value pairs which must be made available
            to the distributed workers.
            </summary>
    </member>
    <member name="T:BayesServer.Distributed.INameValuesReader">
      <summary>
            Interface for reading name/value pairs.
            </summary>
    </member>
    <member name="M:BayesServer.Distributed.INameValuesReader.Read(System.String)">
      <summary>
            Reads the value (as a stream) for a particular name.
            </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>The stream containing the value if the name exists, or throws an exception otherwise.</returns>
    </member>
    <member name="M:BayesServer.Distributed.INameValuesReader.Contains(System.String)">
      <summary>
            Determines whether a value exists for a particular name.
            </summary>
      <param name="name">The name corresponding to the value.</param>
      <returns>
        <c>true</c> if the value exists, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:BayesServer.Distributed.INameValuesWriter">
      <summary>
            Interface for writing name/value pairs.
            </summary>
    </member>
    <member name="M:BayesServer.Distributed.INameValuesWriter.Write(System.String,System.Action{System.IO.Stream})">
      <summary>
            Write a value for a name.
            </summary>
      <param name="name">The name corresponding to the value to be stored.</param>
      <param name="writer">A function which can save the value.</param>
    </member>
    <member name="T:BayesServer.Distributed.NamespaceDoc">
      <summary>
            Contains classes and interfaces for distributed algorithms such as distributed parameter learning.
            </summary>
    </member>
    <member name="T:BayesServer.HeadTail">
      <summary>
            Indicates whether a variable is marked as head or tail in a distribution.  See <see cref="T:BayesServer.VariableContext" />.
            </summary>
      <remarks>
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
      <seealso cref="T:BayesServer.VariableContext" />
    </member>
    <member name="F:BayesServer.HeadTail.Head">
      <summary>
            Indicates that a variable is marked as head in a distribution.  See <see cref="T:BayesServer.VariableContext" />.
            </summary>
      <remarks>
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
    </member>
    <member name="F:BayesServer.HeadTail.Tail">
      <summary>
            Indicates that a variable is marked as tail in a distribution.  See <see cref="T:BayesServer.VariableContext" />.
            </summary>
      <remarks>
            Head variables are those on the left, and tail variables are those on the right in the expression P(A|B).
            </remarks>
    </member>
    <member name="T:BayesServer.ICancellation">
      <summary>
            Interface for cancelling long running operations.
            </summary>
    </member>
    <member name="P:BayesServer.ICancellation.Cancel">
      <summary>
            When set to <c>true</c> attempts to cancel a long running operation.
            </summary>
      <remarks>
            The value must be set by a thread other than the thread running the operation to be cancelled.
            </remarks>
    </member>
    <member name="T:BayesServer.IDistribution">
      <summary>
            Interface specifying the required methods and properties for a probability distribution.  For example the <see cref="T:BayesServer.Table" /> class implements this interface.
            </summary>
      <remarks>While a distribution is assigned to a <see cref="T:BayesServer.Node" /> it cannot be modified.</remarks>
      <seealso cref="T:BayesServer.Table" />
      <seealso cref="T:BayesServer.CLGaussian" />
    </member>
    <member name="P:BayesServer.IDistribution.SortedVariables">
      <summary>
            Gets the collection of variables in the distribution, sorted by time (which may be null) and the order in which variables were created.
            </summary>
      <value>Variables sorted by time and the order in which variables were created.</value>
    </member>
    <member name="M:BayesServer.IDistribution.TimeShift(System.Int32)">
      <summary>
            Shifts any times associated with the distribution variables by the specified number of time units.
            </summary>
      <param name="units">The number of time units to shift.  Can be negative if required.</param>
    </member>
    <member name="P:BayesServer.IDistribution.Locked">
      <summary>
            Locks or unlocks a distribution.
            </summary>
      <remarks>The distribution cannot be modified if either <see cref="P:BayesServer.IDistribution.Locked" /> is <c>true</c> or <see cref="P:BayesServer.IDistribution.Owner" /> is not null.</remarks>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:BayesServer.IDistribution.IsReadOnly">
      <summary>
            Indicates whether the distribution is read only.
            </summary>
      <remarks>
            A distribution is read only if it is locked or is assigned to a <see cref="T:BayesServer.Node" />.
            </remarks>
      <returns>
        <c>true</c> if read only; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:BayesServer.IDistribution.Owner">
      <summary>
            Gets the current owner, if assigned to a node.  A distribution cannot be modified when it is assigned to a node.
            </summary>
    </member>
    <member name="P:BayesServer.IDistribution.Outer">
      <summary>
            Returns the parent distribution, if this instance is aggregated by another distribution.
            </summary>
    </member>
    <member name="M:BayesServer.IDistribution.Multiply(BayesServer.IDistribution)">
      <summary>
            Creates a new distribution which is the result of multiplying this instance by another distribution.
            </summary>
      <param name="distribution">The distribution to multiply this instance by.</param>
      <returns>The combined distribution.</returns>
    </member>
    <member name="M:BayesServer.IDistribution.Divide(BayesServer.IDistribution)">
      <summary>
            Creates a new distribution by dividing the instance by the specified subset.  Also known as the complement.
            </summary>
      <remarks>
            The returned distribution, if multiplied by the subset, would be equivalent to this instance.
            </remarks>
      <param name="subset">The subset to divide by.</param>
      <returns>A new distribution.</returns>
    </member>
    <member name="M:BayesServer.IDistribution.Instantiate(System.Nullable{System.Double}[])">
      <summary>
            Calculates the distribution which results from instantiating a number of variables.
            </summary>
      <remarks>
        <paramref name="values" /> should contain one entry for each <seealso cref="T:BayesServer.VariableContext" /> in 
            the distribution, however entries can be null.
            </remarks>
      <param name="values">The instantiated values. Entries can be null.</param>
      <returns>The instantiated distribution.</returns>
    </member>
    <member name="M:BayesServer.IDistribution.Marginalize(BayesServer.IDistribution)">
      <summary>
            Marginalizes (sums/integrates) the <paramref name="superset" /> into this instance.  
            </summary>
      <param name="superset">A distribution whose variables form a superset of the variables in this instance.</param>
    </member>
    <member name="M:BayesServer.IDistribution.Marginalize(BayesServer.IDistribution,BayesServer.PropagationMethod)">
      <summary>
            Marginalizes (sums/integrates) the <paramref name="superset" /> into this instance.  
            </summary>
      <param name="superset">A distribution whose variables form a superset of the variables in this instance.</param>
      <param name="propagation">The propagation method to use during marginalization.</param>
    </member>
    <member name="M:BayesServer.IDistribution.Copy">
      <summary>
            Creates a copy of the distribution.  The new distribution will not have an owner.
            </summary>
      <returns>A copy of the distribution.</returns>
    </member>
    <member name="M:BayesServer.IDistribution.Copy(System.Nullable{System.Int32})">
      <summary>
            Creates a copy of the distribution, and shifts any times associated with variables by the specified amount.  The new distribution will not have an owner.
            </summary>
      <param name="timeShift">The amount to shift any times present in the distribution.  Can be negative.</param>
      <returns>A copy of this instance, with shifted times.</returns>
    </member>
    <member name="P:BayesServer.IDistribution.Table">
      <summary>
            Gets the <see cref="T:BayesServer.Table" /> which specifies the distribution over any discrete variables.  Often referred to as a Mixture.
            </summary>
      <value>The table.</value>
    </member>
    <member name="T:BayesServer.Interval`1">
      <summary>
            An interval, defined by a minimum and maximum with respective open or closed endpoints.
            </summary>
      <typeparam name="T">
            The data type used in the interval.  E.g. <see cref="T:System.Double" />.
            </typeparam>
    </member>
    <member name="M:BayesServer.Interval`1.#ctor(`0,`0,BayesServer.IntervalEndPoint,BayesServer.IntervalEndPoint)">
      <summary>
            Initializes a new instance of an Interval.
            </summary>
      <param name="minimum">The minimum value in the interval.</param>
      <param name="maximum">The maximum value in the interval.</param>
      <param name="minimumEndPoint">The end point type for the minimum value.</param>
      <param name="maximumEndPoint">The end point type for the maximum value.</param>
    </member>
    <member name="P:BayesServer.Interval`1.Maximum">
      <summary>
            Gets or sets the maximum interval value.
            </summary>
      <value>
            The maximum value in the interval.
            </value>
    </member>
    <member name="P:BayesServer.Interval`1.MaximumEndPoint">
      <summary>
            Gets or sets the end point type for the maximum value of the interval.
            </summary>
    </member>
    <member name="P:BayesServer.Interval`1.Minimum">
      <summary>
            Gets or sets the minimum interval value.
            </summary>
      <value>
            The minimum value in the interval.
            </value>
    </member>
    <member name="P:BayesServer.Interval`1.MinimumEndPoint">
      <summary>
            Gets or sets the end point type for the minimum value of the interval.
            </summary>
    </member>
    <member name="M:BayesServer.Interval`1.Contains(`0)">
      <summary>
            Determines whether a value is within this interval.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <c>true</c> if the value is contained in the interval, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:BayesServer.Interval`1.CompareTo(`0)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.Interval`1.ToString">
      <inheritdoc />
    </member>
    <member name="T:BayesServer.IntervalEndPoint">
      <summary>
            The type of end point for an interval.
            </summary>
    </member>
    <member name="F:BayesServer.IntervalEndPoint.Open">
      <summary>
            The end point of an interval is open.
            </summary>
    </member>
    <member name="F:BayesServer.IntervalEndPoint.Closed">
      <summary>
            The end point of an interval is closed.
            </summary>
    </member>
    <member name="T:BayesServer.InvalidNetworkException">
      <summary>
            Raised when a network has not been correctly specified.
            </summary>
      <seealso cref="M:BayesServer.Network.Validate" />
    </member>
    <member name="M:BayesServer.InvalidNetworkException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.InvalidNetworkException" /> class.
            </summary>
    </member>
    <member name="M:BayesServer.InvalidNetworkException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.InvalidNetworkException" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:BayesServer.InvalidNetworkException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.InvalidNetworkException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:BayesServer.IStop">
      <summary>
            Interface to allow early completion of a long running task.
            </summary>
      <remarks>
            Note that while <see cref="T:BayesServer.IStop" /> will finish the process (for example in a reduced number of iterations),
            <see cref="T:BayesServer.ICancellation" /> will cancel the learning process, throwing an <see cref="T:System.OperationCanceledException" />.
            </remarks>
    </member>
    <member name="P:BayesServer.IStop.Stop">
      <summary>
            When <c>true</c>, indicates to the algorithm to complete early.
            </summary>
    </member>
    <member name="T:BayesServer.License">
      <summary>
            Provides license validation.
            </summary>
    </member>
    <member name="P:BayesServer.License.IsValid">
      <summary>
            Gets a value indicating whether a license has been successfully validated or not.
            </summary>
    </member>
    <member name="M:BayesServer.License.Invalidate">
      <summary>
            Resets any previous validation.  This is typically only used for testing.
            </summary>
    </member>
    <member name="M:BayesServer.License.Validate(System.String)">
      <summary>
            Validates the library.  This should be called before using the library.
            </summary>
      <param name="key">The license key received when purchasing the product.</param>
    </member>
    <member name="T:BayesServer.Link">
      <summary>
            Represents a directed link in a Bayesian network.
            </summary>
      <remarks>For Dynamic Bayesian Networks, an order can be specified to link temporal nodes between different time slices.</remarks>
    </member>
    <member name="M:BayesServer.Link.#ctor(BayesServer.Node,BayesServer.Node)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Link" /> class with the parent node specified in <paramref name="from" /> and the child in <paramref name="to" />.  
            </summary>
      <param name="from">The parent node.</param>
      <param name="to">The child node.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="from" /> or <paramref name="to" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Link.#ctor(BayesServer.Node,BayesServer.Node,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Link" /> class with a specified <paramref name="temporalOrder" />, the parent node specified in <paramref name="from" /> and the child in <paramref name="to" />.
            </summary>
      <remarks>
            If a temporal order is specified that is greater than zero, then a link can connect two nodes (which may be the same) at different times.
            </remarks>
      <param name="from">The parent node.</param>
      <param name="to">The child node.</param>
      <param name="temporalOrder">The temporal order.  Must be greater than or equal to zero.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="from" /> or <paramref name="to" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="temporalOrder" /> is negative.</exception>
    </member>
    <member name="M:BayesServer.Link.Copy(BayesServer.Node,BayesServer.Node,System.Int32)">
      <summary>
            Creates a new link, copying the properties from this instance, such as <see cref="P:BayesServer.Link.Description" /> and <see cref="P:BayesServer.Link.CustomProperties" />.
            </summary>
      <param name="from">The parent node.</param>
      <param name="to">The child node.</param>
      <param name="temporalOrder">The temporal order.  Must be greater than or equal to zero.</param>
      <returns>A new link instance.</returns>
    </member>
    <member name="P:BayesServer.Link.CustomProperties">
      <summary>
            Gets custom properties associated with this instance.
            </summary>
      <remarks>
            Custom properties allow storage of custom information, which will be saved with the network.
            </remarks>
    </member>
    <member name="E:BayesServer.Link.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.Link.Index">
      <summary>
            The Index of this instance in the collection of links belonging to a network, or -1 if the link does not belong to a network.
            </summary>
    </member>
    <member name="P:BayesServer.Link.Description">
      <summary>
            Optional description for the link.
            </summary>
    </member>
    <member name="P:BayesServer.Link.TemporalOrder">
      <summary>
            Gets the temporal order of the link.  If the link is not temporal, zero will be returned.
            </summary>
    </member>
    <member name="P:BayesServer.Link.NoisyOrder">
      <summary>
            Gets or sets a value which determines the nature of the causal effect between the parent node (from) and a noisy child node (to).
            </summary>
      <remarks>
            This property has no effect if the child node is not a noisy node.
            </remarks>
    </member>
    <member name="P:BayesServer.Link.From">
      <summary>
            The parent node of the directed link.
            </summary>
    </member>
    <member name="P:BayesServer.Link.To">
      <summary>
            The child node of the directed link.
            </summary>
    </member>
    <member name="P:BayesServer.Link.Network">
      <summary>
            The <see cref="T:BayesServer.Network" /> the link belongs to.  Value will be null unless the link has been added to a network.
            </summary>
    </member>
    <member name="T:BayesServer.MultipleIterator">
      <summary>
            Provides methods to iterate over multiple distributions.
            </summary>
    </member>
    <member name="T:BayesServer.MultipleIterator.Combination">
      <summary>
            Called by the Iterate methods to indicate a new iteration / combination.
            </summary>
    </member>
    <member name="M:BayesServer.MultipleIterator.Iterate(BayesServer.VariableContextCollection[],System.Int32[],BayesServer.MultipleIterator.Combination)">
      <summary>
            Iterates over all the variables and their states found in <paramref name="subsets" />.
            </summary>
      <remarks>At each iteration <paramref name="combination" /> is called, and <paramref name="subsetRows" /> contains the equivalent row in each subset.</remarks>
      <param name="subsets">The distribution to iterate over.</param>
      <param name="subsetRows">Contains the equivalent row in each subset at a particular iteration (combination).</param>
      <param name="combination">A method which is called for each iteration.</param>
    </member>
    <member name="M:BayesServer.MultipleIterator.Iterate(BayesServer.VariableContextCollection,BayesServer.VariableContextCollection[],System.Int32[],BayesServer.MultipleIterator.Combination)">
      <summary>
            Iterates over all the variables and their states found in <paramref name="subsets" />.
            </summary>
      <remarks>At each iteration <paramref name="combination" /> is called, and <paramref name="subsetRows" /> contains the equivalent row in each subset.</remarks>
      <param name="supersetVariables">The collection of unique variables (and maybe times) contained in the subsets.</param>
      <param name="subsets">The distribution who want to iterate over.</param>
      <param name="subsetRows">Contains the equivalent row in each subset at a particular iteration (combination).</param>
      <param name="combination">A method which is called for each iteration.</param>
    </member>
    <member name="T:BayesServer.NamespaceDoc">
      <summary>
            Contains classes and interfaces for defining the structure and distributions
            of a Bayesian network, and  to save and load them.
            To perform inference, such as calculating posterior probabilities and log-likelihoods
            see the <see cref="N:BayesServer.Inference" /> namespace.
            </summary>
    </member>
    <member name="T:BayesServer.Network">
      <summary>
            Represents a Bayesian Network, or a Dynamic Bayesian Network.  To perform inference with a network see the <see cref="N:BayesServer.Inference" /> namespace.
            </summary>
      <remarks>A Bayesian network consists of nodes which contain one or more variables.  Each node can be connected with a directed <see cref="T:BayesServer.Link">link</see> 
            (A link in a Dynamic Bayesian Network can have an associated order which links nodes in different time slices).
            <para>
            Each node in a Bayesian network must have a distribution specified over its own variables conditional on its parents variables.  For example if a network contains
            nodes A and B each with a single variable of the same name, and A is a parent of B, then the distribution at A equals P(A), since A has no parents,
            and the distribution at B equals P(B|A).
            </para><para>Once the nodes, links, and distributions in a Bayesian network have been specified, one or more inference engines
            can be created based on the network, to perform probabilistic inference.  See <see cref="T:BayesServer.Inference.IInference" />.</para></remarks>
      <seealso cref="T:BayesServer.Node" />
      <seealso cref="T:BayesServer.Link" />
    </member>
    <member name="M:BayesServer.Network.ValidateTrialSession">
      <summary>
            Evaluation version only.
            </summary>
    </member>
    <member name="E:BayesServer.Network.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.Network.HasChanged">
      <summary>
            Indicates whether the network has changed.
            </summary>
      <remarks>
            This property is automatically set to <c>false</c> when the network
            is saved, or loaded.
            </remarks>
    </member>
    <member name="P:BayesServer.Network.CustomProperties">
      <summary>
            Gets custom properties associated with this instance.
            </summary>
      <remarks>
            Custom properties allow storage of custom information, which will be saved with the network.
            </remarks>
    </member>
    <member name="P:BayesServer.Network.NodeGroups">
      <summary>
            Gets groups which nodes can belong to.
            </summary>
      <remarks>
            Each node can belong to one or more groups.   
            </remarks>
    </member>
    <member name="P:BayesServer.Network.SyncNodeVariableName">
      <summary>
            When <c>true</c> synchronizes <see cref="T:BayesServer.Variable" /> names with their containing <see cref="T:BayesServer.Node" />.
            </summary>
      <remarks>
            The synchronization is one way from the Node to the Variable only.
            <p>Synchronization only occurs when a node has a single variable, whose name matches its containing node.</p></remarks>
    </member>
    <member name="M:BayesServer.Network.Copy">
      <summary>
            Makes a copy of the network.
            </summary>
      <returns>The copy.</returns>
    </member>
    <member name="P:BayesServer.Network.IsInternal">
      <summary>
            For internal use only.  May be removed in future versions.
            </summary>
    </member>
    <member name="M:BayesServer.Network.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Network" /> class.
            </summary>
    </member>
    <member name="M:BayesServer.Network.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Network" /> class with the specified <paramref name="name" />.
            </summary>
      <param name="name">The optional name of the network.  Can be null.</param>
    </member>
    <member name="M:BayesServer.Network.Validate(BayesServer.ValidationOptions)">
      <summary>
            Validates that the Bayesian network is correctly specified.
            </summary>
      <param name="options">Specifies options to control the validation process.</param>
      <exception cref="T:BayesServer.InvalidNetworkException">Raised when the network is not correctly specified, containing the error message.</exception>
    </member>
    <member name="M:BayesServer.Network.IsDag">
      <summary>
            Determines whether this instance is a Directed Acyclic Graph (DAG) which is a requirement for Bayesian networks.
            </summary>
      <returns>
        <c>true</c> if this instance is a DAG; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BayesServer.Network.IsTree">
      <summary>
            Determines whether this instance is a tree (singly connected).
            </summary>
      <returns>
        <c>true</c> if this instance is a tree; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BayesServer.Network.AddMonitor(BayesServer.INetworkMonitor)">
      <summary>
            For internal use only.
            </summary>
      <param name="monitor">
      </param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="monitor" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Network.RemoveMonitor(BayesServer.INetworkMonitor)">
      <summary>
            For internal use.
            </summary>
      <param name="monitor">
      </param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="monitor" /> is null.</exception>
    </member>
    <member name="P:BayesServer.Network.Nodes">
      <summary>
            The collection of nodes in the Bayesian network.
            </summary>
      <seealso cref="T:BayesServer.Node" />
    </member>
    <member name="P:BayesServer.Network.Variables">
      <summary>
            The collection of variables in the Bayesian network.
            </summary>
      <seealso cref="T:BayesServer.Variable" />
    </member>
    <member name="P:BayesServer.Network.Links">
      <summary>
            The collection of links in the Bayesian network.
            </summary>
      <remarks>
            Note that if a <see cref="T:BayesServer.Node" /> is removed from the network, all of its links are automatically removed.
            </remarks>
      <seealso cref="T:BayesServer.Link" />
    </member>
    <member name="P:BayesServer.Network.Name">
      <summary>
            An optional name for the Bayesian network.
            </summary>
    </member>
    <member name="P:BayesServer.Network.Description">
      <summary>
            An optional description for the Bayesian network.
            </summary>
    </member>
    <member name="M:BayesServer.Network.SaveToString(System.Text.Encoding)">
      <summary>
            Saves the network to a string, with the specified encoding.  For large networks consider saving to file or a stream.
            </summary>
      <param name="encoding">The encoding to use.</param>
      <returns>The network persisted to a string.</returns>
    </member>
    <member name="M:BayesServer.Network.SaveToString">
      <summary>
            Saves the network to a string, with UTF-8 encoding.  For large networks consider saving to file or a stream.
            </summary>
      <returns>The network persisted to a string.</returns>
    </member>
    <member name="M:BayesServer.Network.LoadFromString(System.String,System.Text.Encoding)">
      <summary>
            Loads a network from a string using the specified encoding.
            </summary>
      <param name="value">The persisted string value of the network.</param>
      <param name="encoding">The encoding the network was originally saved in.</param>
    </member>
    <member name="M:BayesServer.Network.LoadFromString(System.String)">
      <summary>
            Loads a network from a string using UTF-8 encoding.
            </summary>
      <param name="value">The persisted string value of the network.</param>
    </member>
    <member name="M:BayesServer.Network.Save(System.IO.Stream)">
      <summary>
            Saves this <see cref="T:BayesServer.Network" /> to the specified output <see cref="T:System.IO.Stream" />.
            </summary>
      <remarks>When saving to file, .bayes is the recommended file extension.  The encoding used is UTF-8.</remarks>
      <param name="output">The <see cref="T:System.IO.Stream" /> to save to.</param>
    </member>
    <member name="M:BayesServer.Network.Save(System.String)">
      <summary>
            Saves this <see cref="T:BayesServer.Network" /> to the specified <paramref name="path" /> overwriting the file if it already exists.
            </summary>
      <remarks>The recommended file extension is .bayes</remarks>
      <param name="path">The path and name of the file to save to.</param>
    </member>
    <member name="M:BayesServer.Network.Load(System.String)">
      <summary>
            Loads a <see cref="T:BayesServer.Network" /> from the specified <paramref name="path" />.
            </summary>
      <param name="path">The path and file name to load from.</param>
    </member>
    <member name="M:BayesServer.Network.Load(System.IO.Stream)">
      <summary>
            Loads a <see cref="T:BayesServer.Network" /> from the specified input <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="input">The <see cref="T:System.IO.Stream" /> to load from.</param>
    </member>
    <member name="T:BayesServer.NetworkLinkCollection">
      <summary>
            Represents the collection of directed links maintained by the <see cref="T:BayesServer.Network" /> class.  See <see cref="P:BayesServer.Network.Links" /> .  Duplicates and null values are not allowed.
            </summary>
      <remarks>This collection contains all links in a network.  To find links specific to a particular node, see <see cref="P:BayesServer.Node.LinksIn">LinksIn</see> and <see cref="P:BayesServer.Node.LinksOut">LinksOut</see>.</remarks>
      <seealso cref="P:BayesServer.Node.LinksIn" />
      <seealso cref="P:BayesServer.Node.LinksOut" />
    </member>
    <member name="E:BayesServer.NetworkLinkCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.NetworkLinkCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.NetworkLinkCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="P:BayesServer.NetworkLinkCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection read-only.  Always returns false;
            </summary>
      <value>
      </value>
      <returns>false</returns>
    </member>
    <member name="P:BayesServer.NetworkLinkCollection.Network">
      <summary>
            Gets the <see cref="T:BayesServer.Network" /> the collection belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.NetworkLinkCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:BayesServer.Link" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:BayesServer.Link" /> to find.</param>
      <returns>A <see cref="T:BayesServer.Link" />.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when value being set is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the value being set already belongs to a network, an equivalent link already exists, or the link nodes do not belong to the <see cref="T:BayesServer.Network" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Add(BayesServer.Link)">
      <summary>
            Adds the <see cref="T:BayesServer.Link" /> to the end of the collection.
            </summary>
      <param name="item">The link to add.  Cannot be null.  Duplicates are not allowed.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the new link already belongs to a network, a link already exists between the nodes, or the link nodes do not belong to <see cref="T:BayesServer.Network" />.</exception>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Clear">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Contains(BayesServer.Link)">
      <summary>
            Determines whether a <see cref="T:BayesServer.Link" /> is in the collection.  The operation is O(1).
            </summary>
      <param name="item">The <see cref="T:BayesServer.Link" /> to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Find(BayesServer.Node,BayesServer.Node)">
      <summary>
            Finds a link from one node to another if it exists, otherwise returns null.
            </summary>
      <param name="from">The from (parent) node.</param>
      <param name="to">The to (child) node.</param>
      <returns>The link if found, otherwise null.</returns>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Find(BayesServer.Node,BayesServer.Node,System.Int32)">
      <summary>
            Finds a link from one node to another if it exists, otherwise returns null.
            </summary>
      <param name="from">The from (parent) node.</param>
      <param name="to">The to (child) node.</param>
      <param name="temporalOrder">The temporal order of the link.  Will be null unless the nodes are temporal nodes.</param>
      <returns>The link if found, otherwise null.</returns>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.CopyTo(BayesServer.Link[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.IndexOf(BayesServer.Link)">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.Link" /> in the collection.  This operation is O(1).
            </summary>
      <param name="item">The link. The value can be null.</param>
      <returns>The index of the link or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Insert(System.Int32,BayesServer.Link)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to add the element.</param>
      <param name="item">The item to insert.  Cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the new link already belongs to a network, an equivalent link already exists, or the link nodes do not belong to the <see cref="T:BayesServer.Network" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.Remove(BayesServer.Link)">
      <summary>
            Removes the <see cref="T:BayesServer.Link" /> from the collection.
            </summary>
      <param name="item">The <see cref="T:BayesServer.Link" /> to be removed from the collection.</param>
      <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:BayesServer.NetworkLinkCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an element from the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to remove the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="T:BayesServer.NetworkNodeCollection">
      <summary>
            Represents the collection of <see cref="P:BayesServer.Network.Nodes" /> maintained by the <see cref="T:BayesServer.Network" /> class.  Duplicates and null values are not allowed.
            </summary>
    </member>
    <member name="E:BayesServer.NetworkNodeCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.NetworkNodeCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.NetworkNodeCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:BayesServer.Node" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:BayesServer.Node" /> to find.</param>
      <returns>A <see cref="T:BayesServer.Node" />.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when value being set is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the value being set already belongs to a network.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="P:BayesServer.NetworkNodeCollection.Network">
      <summary>
            The <see cref="T:BayesServer.Network" /> the collection belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.NetworkNodeCollection.Item(System.String)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.Node" /> to find.</param>
      <returns>The <see cref="T:BayesServer.Node" /> with the specified name; otherwise null.</returns>
    </member>
    <member name="P:BayesServer.NetworkNodeCollection.Item(System.String,System.Boolean)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.Node" /> to find.</param>
      <param name="throwIfNotFound">When <c>true</c> throws an exception if the name is not found.</param>
      <returns>The <see cref="T:BayesServer.Node" /> with the specified name; otherwise null.</returns>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.Contains(BayesServer.Node)">
      <summary>
            Determines whether a <see cref="T:BayesServer.Node" /> is in the collection.  The operation is O(1).
            </summary>
      <param name="node">The <see cref="T:BayesServer.Node" /> to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="node" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.Clear">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.AddRange(System.Collections.Generic.IList{BayesServer.Node})">
      <summary>
            Adds the <paramref name="nodes" /> to the end of the collection.
            </summary>
      <param name="nodes">The collection whose elements should be added.  Cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> collection is null.</exception>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.Insert(System.Int32,BayesServer.Node)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to add the element.</param>
      <param name="item">The item to insert.  Cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the node already belongs to a network.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.IndexOf(BayesServer.Node)">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.Node" /> in the collection.  This operation is O(1).
            </summary>
      <param name="item">The node.  The value can be null.</param>
      <returns>The index of the node or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.Add(BayesServer.Node)">
      <summary>
            Adds the <see cref="T:BayesServer.Node" /> to the end of the collection.
            </summary>
      <param name="item">The node to add.  Cannot be null.  Duplicates are not allowed.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the node already belongs to a network.</exception>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.Remove(BayesServer.Node)">
      <summary>
            Removes the <see cref="T:BayesServer.Node" /> from the collection.
            </summary>
      <param name="item">The <see cref="T:BayesServer.Node" /> to be removed from the collection.</param>
      <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an element from the collection at the specified index, and any links that it has.
            </summary>
      <param name="index">The zero based index at which to remove the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="P:BayesServer.NetworkNodeCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.CopyTo(BayesServer.Node[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:BayesServer.NetworkNodeCollection.IsReadOnly">
      <summary>
            Determines whether the collection is read only.  Always returns false.
            </summary>
    </member>
    <member name="M:BayesServer.NetworkNodeCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:BayesServer.NetworkNodeCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the entire <see cref="T:BayesServer.NetworkNodeCollection" />.</returns>
    </member>
    <member name="T:BayesServer.NetworkNodeGroupCollection">
      <summary>
            A collection of groups.
            </summary>
    </member>
    <member name="P:BayesServer.NetworkNodeGroupCollection.Network">
      <summary>
            Gets the network instance that these groups belong to.
            </summary>
    </member>
    <member name="P:BayesServer.NetworkNodeGroupCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:BayesServer.NodeGroup" /> with the specified name, from the collection, or returns null if not found.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.NodeGroup" /> to return.</param>
      <returns>The <see cref="T:BayesServer.NodeGroup" /> with the specified name, or null if not found.</returns>
    </member>
    <member name="M:BayesServer.NetworkNodeGroupCollection.ClearItems">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NetworkNodeGroupCollection.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NetworkNodeGroupCollection.InsertItem(System.Int32,BayesServer.NodeGroup)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NetworkNodeGroupCollection.MoveItem(System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NetworkNodeGroupCollection.SetItem(System.Int32,BayesServer.NodeGroup)">
      <inheritdoc />
    </member>
    <member name="T:BayesServer.NetworkVariableCollection">
      <summary>
            Represents a read-only collection of variables that belong to a network.  When a variable is added to a <see cref="T:BayesServer.Node" /> it is automatically inserted into this collection.
            </summary>
    </member>
    <member name="E:BayesServer.NetworkVariableCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.NetworkVariableCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.NetworkVariableCollection.Network">
      <summary>
            The <see cref="T:BayesServer.Network" /> the collection belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.NetworkVariableCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:BayesServer.NetworkVariableCollection" /> instance.
            </summary>
    </member>
    <member name="M:BayesServer.NetworkVariableCollection.Contains(BayesServer.Variable)">
      <summary>
            Determines whether a <see cref="T:BayesServer.Variable" /> is in the collection.  The operation is O(1).
            </summary>
      <param name="variable">The <see cref="T:BayesServer.Variable" /> to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="variable" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.NetworkVariableCollection.IndexOf(BayesServer.Variable)">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.Variable" /> in the collection.  This operation is O(1).
            </summary>
      <param name="item">The variable to find. The value can be null.</param>
      <returns>The index of the variable in the collection, or -1 if not found.</returns>
    </member>
    <member name="P:BayesServer.NetworkVariableCollection.Item(System.String)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.Variable" /> to find.</param>
      <returns>The <see cref="T:BayesServer.Variable" /> found with the specified name; otherwise null.</returns>
    </member>
    <member name="P:BayesServer.NetworkVariableCollection.Item(System.String,System.Boolean)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.Variable" /> to find.</param>
      <param name="throwIfNotFound">When <c>true</c> throws an exception if the name is not found.</param>
      <returns>The <see cref="T:BayesServer.Variable" /> with the specified name; otherwise null.</returns>
    </member>
    <member name="P:BayesServer.NetworkVariableCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:BayesServer.Variable" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:BayesServer.Variable" /> to find.</param>
      <returns>A <see cref="T:BayesServer.Variable" />.</returns>
    </member>
    <member name="M:BayesServer.NetworkVariableCollection.CopyTo(BayesServer.Variable[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:BayesServer.NetworkVariableCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:BayesServer.NetworkVariableCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the entire <see cref="T:BayesServer.NetworkVariableCollection" />.</returns>
    </member>
    <member name="T:BayesServer.Node">
      <summary>
            Represents a node with one or more variables in a Bayesian network.
            </summary>
      <remarks>
            Note that node names must be unique per network, and are case sensitive.
            <para>
            To specify a distribution for a node, see the <see cref="P:BayesServer.Node.Distribution" /> property.
            </para><para>
            To add a directed link between two nodes, it must be added through the <see cref="P:BayesServer.Network.Links">Network.Links</see> property.
            </para></remarks>
      <seealso cref="T:BayesServer.Network" />
      <seealso cref="T:BayesServer.Link" />
    </member>
    <member name="E:BayesServer.Node.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.Node.Copy">
      <summary>
            Makes a copy of this instance.
            </summary>
      <remarks>
            The copy does not include links or distribution(s).
            </remarks>
      <returns>The copy.</returns>
    </member>
    <member name="M:BayesServer.Node.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class, with no variables, and no name.
            </summary>
    </member>
    <member name="M:BayesServer.Node.#ctor(BayesServer.Variable)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class with a specified <see cref="T:BayesServer.Variable" /> and assigns the name of the variable to the node.
            </summary>
      <param name="variable">A single variable for the node.</param>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,BayesServer.VariableValueType,BayesServer.VariableKind)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class with the specified <paramref name="name" />.
            A <see cref="T:BayesServer.Variable" /> is automatically created for the node and assigned the same name as the node with the <see cref="T:BayesServer.VariableValueType" /> specified.
            </summary>
      <param name="name">The name to give the node and variable, which can be null or empty.</param>
      <param name="valueType">The <see cref="T:BayesServer.VariableValueType" /> of the node variable, e.g. discrete or continuous.</param>
      <param name="kind">The kind of variable, e.g. Probability (standard), Decision or Utility.</param>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,BayesServer.VariableValueType)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class with the specified <paramref name="name" />.  A <see cref="T:BayesServer.Variable" /> is automatically created for the node and assigned the same name as the node with the <see cref="T:BayesServer.VariableValueType" /> specified.
            </summary>
      <param name="name">The name to give the node and variable, which can be null or empty.</param>
      <param name="valueType">The <see cref="T:BayesServer.VariableValueType" /> of the node variable, e.g. discrete or continuous.</param>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class with the specified <paramref name="name" /> and automatically adds a discrete <see cref="T:BayesServer.Variable" /> with the number of states specified in <paramref name="states" />.
            </summary>
      <param name="name">The name to give the node and variable, which can be null or empty.</param>
      <param name="states">The number of states to add to the automatically created <see cref="T:BayesServer.Variable" />.  States will be given default names.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Raised when the <paramref name="states" /> parameter is less than zero.</exception>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class, with the name of the node, automatically creating an associated discrete <see cref="T:BayesServer.Variable" /> and adds the states specified in <paramref name="states" /> to that variable.
            </summary>
      <param name="name">The name of the node and variable.</param>
      <param name="states">The states to add to the associated <see cref="T:BayesServer.Variable" />, specified by their names.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="states" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,BayesServer.State[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class, with the name of the node, automatically creating an associated discrete <see cref="T:BayesServer.Variable" /> and adds the states specified in <paramref name="states" /> to that variable.
            </summary>
      <param name="name">The name of the node and variable.</param>
      <param name="states">The states to add to the associated <see cref="T:BayesServer.Variable" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="states" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,BayesServer.Variable[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class with a specified name and a number of variables.
            </summary>
      <param name="name">The name for the node.</param>
      <param name="variables">The variable(s) represented by the node.</param>
    </member>
    <member name="M:BayesServer.Node.#ctor(System.String,System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Node" /> class with a specified name and a number of variables.
            </summary>
      <param name="name">The name for the node.</param>
      <param name="variables">The variable(s) represented by the node.</param>
    </member>
    <member name="P:BayesServer.Node.CustomProperties">
      <summary>
            Gets custom properties associated with this instance.
            </summary>
      <remarks>
            Custom properties allow storage of custom information, which will be saved with the network.
            </remarks>
    </member>
    <member name="P:BayesServer.Node.Groups">
      <summary>
            Gets the groups this node belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.Node.TemporalType">
      <summary>
            The <see cref="T:BayesServer.TemporalType" /> of the node.  The default value is <see cref="F:BayesServer.TemporalType.Contemporal" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">Raised if the node belongs to a network, in which case the TemporalType cannot be changed.</exception>s
        </member>
    <member name="P:BayesServer.Node.DistributionOptions">
      <summary>
            Options that apply to all distributions of this instance.
            </summary>
    </member>
    <member name="P:BayesServer.Node.Bounds">
      <summary>
            Gets or sets the size and location of the node.
            </summary>
      <value>The size and location of the node.</value>
    </member>
    <member name="M:BayesServer.Node.ToString">
      <summary>
            Returns the name of the node, or an empty string if the name is null.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing the name of the node which is empty if the name is null.
            </returns>
    </member>
    <member name="M:BayesServer.Node.NewDistribution(System.Int32)">
      <summary>
            Creates a new distribution suitable for the requested temporal order, however it is not assigned to the node.  Use <see cref="P:BayesServer.Node.Distributions" /> to perform the assignment.
            </summary>
      <remarks>
            See <see cref="T:BayesServer.NodeDistributions" /> for more information.
            <para>Note: if the resulting distribution contains continuous variables, but no discrete head variables, all table
            values are initialized to 1.
            </para></remarks>
      <param name="temporalOrder">The order for the requested distribution.</param>
      <returns>The new distribution.</returns>
      <seealso cref="T:BayesServer.NodeDistributions" />
    </member>
    <member name="M:BayesServer.Node.NewDistribution(BayesServer.NodeDistributionKey)">
      <summary>
            Creates a new distribution suitable for the requested temporal order/related node, however it is not assigned to the node.  Use <see cref="P:BayesServer.Node.Distributions" /> to perform the assignment.
            </summary>
      <remarks>
            See <see cref="T:BayesServer.NodeDistributions" /> for more information.
            <para>Note: if the resulting distribution contains continuous variables, but no discrete head variables, all table
            values are initialized to 1.
            </para><para>
            A noisy node is specified using multiple distributions, one for each parent and a leak distribution.
            Set the related node property to a parent, or set it to the current node to set the leak distribution.
            Each distribution corresponding to a parent of the noisy node has a number of constrained values which are not parameters.  
            These are automatically set by newDistribution (see the help for noisy nodes in the main documentation for more detail).
            </para></remarks>
      <param name="key">Identifies the order/related node for the requested distribution.</param>
      <returns>The new distribution.</returns>
      <seealso cref="T:BayesServer.NodeDistributions" />
    </member>
    <member name="M:BayesServer.Node.NewDistribution(BayesServer.NodeDistributionKind)">
      <summary>
            Creates a new distribution with the given kind, however it is not assigned to the node. Use <see cref="P:BayesServer.Node.Distributions" /> to perform the assignment.  For temporal or noisy nodes us a different overload.  
            </summary>
      <remarks>
            See <see cref="T:BayesServer.NodeDistributions" /> for more information.
            <para>Note: if the resulting distribution contains continuous variables, but no discrete head variables, all table
            values are initialized to 1.
            </para></remarks>
      <param name="kind">The kind of distribution to create.</param>
      <returns>The new distribution.</returns>
      <seealso cref="T:BayesServer.NodeDistributions" />
    </member>
    <member name="M:BayesServer.Node.NewDistribution(BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKind)">
      <summary>
            Creates a new distribution suitable for the requested temporal order/related node, however it is not assigned to the node.  Use <see cref="P:BayesServer.Node.Distributions" /> to perform the assignment.
            </summary>
      <remarks>
            See <see cref="T:BayesServer.NodeDistributions" /> for more information.
            <para>Note: if the resulting distribution contains continuous variables, but no discrete head variables, all table
            values are initialized to 1.
            </para><para>
            Experience table entries are also initialized to 1.
            </para><para>
            A noisy node is specified using multiple distributions, one for each parent and a leak distribution.
            Set the related node property to a parent, or set it to the current node to set the leak distribution.
            Each distribution corresponding to a parent of the noisy node has a number of constrained values which are not parameters.  
            These are automatically set by newDistribution (see the help for noisy nodes in the main documentation for more detail).
            </para></remarks>
      <param name="key">Identifies the order/related node for the requested distribution.</param>
      <param name="kind">The kind of distribution to create.</param>
      <returns>The new distribution.</returns>
      <seealso cref="T:BayesServer.NodeDistributions" />
    </member>
    <member name="M:BayesServer.Node.NewDistribution">
      <summary>
            Creates a new distribution suitable for the node, however does not assign it to the node's <see cref="P:BayesServer.Node.Distribution" /> property.
            </summary>
      <remarks>
            This method is useful for creating distributions appropriate for a node.  However, the returned distribution cannot
            be set to <see cref="P:BayesServer.Node.Distribution" /> until the distribution has been correctly specified.
            <para>Note: if the resulting distribution contains continuous variables, but no discrete head variables, all table
            values are initialized to 1.
            </para></remarks>
      <remarks>
            This is a helper function that creates a distribution of the required shape for a node, given its parents (and other factors such as whether it is a noisy node etc…).
            You do not have to use newDistribution.  Instead you can create the distribution manually, however newDistribution is usually the preferred approach.
            In its most simple form, calling newDistribution on a node A, simply creates a Table containing the variables in A conditioned on the variables in all the parents of A (or a CLGaussian if any continuous variables are involved).
            You then need to specify all the parameters before assigning it to A.
            </remarks>
      <remarks>
            For noisy nodes, use one of the other overloads for NewDistribution, as noisy nodes require multiple distributions, and a key is used to specify which one is being set.
            </remarks>
      <returns>A new distribution.</returns>
      <exception cref="T:System.ArgumentException">Raised if the node or one of it's parents has zero states.</exception>
    </member>
    <member name="P:BayesServer.Node.Distribution">
      <summary>
            Returns the distribution currently associated with the <see cref="T:BayesServer.Node" />.  The distribution cannot be modified when it is assigned to a node.  It is also automatically set to null, when certain structural changes occur (see remarks).
            </summary>
      <remarks>
            If a structural change occurs to the network that invalidates the current distribution, it is automatically set to null.
            This occurs in the following situations:
            <list type="bullet"><item>States are added or removed from the node.</item><item>States are added or removed from one of the node's parents.</item><item>The <see cref="P:BayesServer.Node.LinksIn" /> collection changes.  I.e. adding or removing a parent node.  Note that if a node is removed from a network, all of its links are automatically removed also.</item></list></remarks>
      <exception cref="T:System.ArgumentException">Raised when the distribution is invalid.</exception>
    </member>
    <member name="P:BayesServer.Node.Distributions">
      <summary>
            Returns the distributions associated with this instance with NodeDistributionKind = Probability.  Some node types such as temporal nodes can have more than one distribution assigned to them.
            </summary>
    </member>
    <member name="P:BayesServer.Node.Name">
      <summary>
            The name of the node.  Node names in a network must be unique, and comparisons are case sensitive.
            </summary>
    </member>
    <member name="P:BayesServer.Node.Description">
      <summary>
            An optional description for the node.
            </summary>
    </member>
    <member name="P:BayesServer.Node.Network">
      <summary>
            The <see cref="T:BayesServer.Network" /> the node belongs to. Value will be null unless the node has been added to a network.
            </summary>
    </member>
    <member name="P:BayesServer.Node.Links">
      <summary>
            Collection of both incoming and outgoing links (parent and child nodes).
            </summary>
    </member>
    <member name="P:BayesServer.Node.Variables">
      <summary>
            Collection of variables represented by the node.
            </summary>
    </member>
    <member name="P:BayesServer.Node.LinksIn">
      <summary>
            Collection of incoming links (linking to parent nodes).
            </summary>
    </member>
    <member name="P:BayesServer.Node.LinksOut">
      <summary>
            Collection of outgoing links (linking to child nodes).
            </summary>
    </member>
    <member name="P:BayesServer.Node.Index">
      <summary>
            The Index of this instance in the collection of nodes belonging to a network, or -1 if the node does not belong to a network.
            </summary>
    </member>
    <member name="T:BayesServer.NodeDistributionChangedEventArgs">
      <summary>
            Contains information passed by <see cref="E:BayesServer.NodeDistributions.DistributionChanged" />.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributionChangedEventArgs.Key">
      <summary>
            The identifier for the distribution. Order will be zero if the node is not temporal.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributionChangedEventArgs.Node">
      <summary>
            The node that owns the distribution.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributionChangedEventArgs.Kind">
      <summary>
            The kind of distribution that was changed on the node.
            </summary>
    </member>
    <member name="T:BayesServer.NodeDistributionKey">
      <summary>
            Identifies a distribution assigned or to be assigned to a node.
            </summary>
      <remarks>
            Some nodes may have more than one distribution assigned to them (e.g. temporal nodes or noisy nodes), and this
            is used to differentiate between them.
            </remarks>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of a NodeDistributionKey.
            </summary>
      <param name="order">The temporal order of the node distribution.</param>
    </member>
    <member name="P:BayesServer.NodeDistributionKey.Default">
      <summary>
            Gets a default instance, which is equivalent to constructing a new instance with the default constructor.
            </summary>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.#ctor(BayesServer.Node)">
      <summary>
            Initializes a new instance of a <see cref="T:BayesServer.NodeDistributionKey" />.
            </summary>
      <param name="relatedNode">The parent of the noisy node this distribution refers to, or the noisy node itself to identify the leak distribution.  This will be null, unless the node is a noisy node.</param>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.#ctor(System.Int32,BayesServer.Node)">
      <summary>
            Initializes a new instance of a <see cref="T:BayesServer.NodeDistributionKey" />.
            </summary>
      <param name="order">The temporal order of the related node distribution.</param>
      <param name="relatedNode">The parent of the noisy node this distribution refers to, or the noisy node itself to identify the leak distribution.  This will be null, unless the node is a noisy node.</param>
    </member>
    <member name="P:BayesServer.NodeDistributionKey.Order">
      <summary>
            Gets the temporal order of the related node distribution.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributionKey.RelatedNode">
      <summary>
            Gets the parent of the noisy node this distribution refers to, or the noisy node itself to identify the leak distribution.  This will be null, unless the node is a noisy node.
            </summary>
      <remarks>
            A noisy node is specified using multiple distributions, one for each parent and a leak distribution.
            Set the related node property to a parent, or set it to the current node to set the leak distribution.
            </remarks>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NodeDistributionKey.op_Equality(BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKey)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.op_Inequality(BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKey)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NodeDistributionKey.Equals(BayesServer.NodeDistributionKey)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:BayesServer.NodeDistributionKey.CompareTo(BayesServer.NodeDistributionKey)">
      <inheritdoc />
    </member>
    <member name="T:BayesServer.NodeDistributionKind">
      <summary>
            The kind of distribution, such as a standard Probability or Experience table.
            </summary>
    </member>
    <member name="F:BayesServer.NodeDistributionKind.Probability">
      <summary>
            The standard kind of probability distribution found in Bayesian networks.
            </summary>
    </member>
    <member name="F:BayesServer.NodeDistributionKind.Experience">
      <summary>
            A distribution which contains experience for the node, used in online learning.
            </summary>
      <remarks>
        <para>
            Once an experience table is combined with the probability of a discrete node, this creates a a Dirichlet distribution which can be used in online learning.
            </para>
      </remarks>
    </member>
    <member name="F:BayesServer.NodeDistributionKind.Fading">
      <summary>
            A table which contains fading values used in online learning.  A value of 1 in the table represents no fading.
            </summary>
      <remarks>
            Fading can be used to decrease the importance of previous experience.
            </remarks>
    </member>
    <member name="T:BayesServer.NodeDistributionOptions">
      <summary>
            Options that apply to all distributions of a particular node.
            </summary>
    </member>
    <member name="E:BayesServer.NodeDistributionOptions.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.NodeDistributionOptions.Node">
      <summary>
            The node this instance belongs to.
            </summary>
    </member>
    <member name="M:BayesServer.NodeDistributionOptions.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>The copy.</returns>
    </member>
    <member name="P:BayesServer.NodeDistributionOptions.NoisyType">
      <summary>
            Gets or sets a value which identifies this node as a noisy node or not.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributionOptions.HasZeroIntercepts">
      <summary>
            Determines whether <see cref="T:BayesServer.CLGaussian" /> intercept terms are fixed to zero.
            </summary>
      <remarks>
            This only applies to <see cref="T:BayesServer.CLGaussian" /> distributions with tails.
            <para>
            When <c>true</c>, the parameter count of the network reduces accordingly.
            </para></remarks>
    </member>
    <member name="T:BayesServer.NodeDistributions">
      <summary>
            Represents the distributions assigned to a <see cref="T:BayesServer.Node" />. Temporal nodes may require more than one distribution to be fully specified.
            </summary>
      <remarks>
            In a Dynamic Bayesian Network (DBN) a node may require more than one distribution to be specified.
            This occurs when a temporal node has incoming links of order greater than zero.  I.e. Has links from past time slices.
            For example, if a temporal node has an incoming link of order 1, then it will require a distribution at
            time t=0, and an additional distribution at t=1.  This is because at time t=0 there is no previous 
            time slice, but at time t=1 there is.  For times greater than 1, in this example the distribution 
            specified at time t=1 is still valid.  However, if a new incoming link of order 12 was added,
            then an additional distribution would need to be specified at time t=12, valid for times t&gt;=12.
            </remarks>
    </member>
    <member name="E:BayesServer.NodeDistributions.DistributionChanged">
      <summary>
            Raised when a distribution is set to a new value or null.
            </summary>
      <remarks>
            To detect when the collection of distributions changes, <see cref="P:BayesServer.Node.LinksIn" /> can be monitored.
            </remarks>
    </member>
    <member name="M:BayesServer.NodeDistributions.FindForTime(System.Int32,System.Int32@)">
      <summary>
            Finds the temporal distribution that is suitable for the time specified.
            </summary>
      <param name="time">The time.</param>
      <param name="temporalOrder">The temporal order associated with the distribution found.</param>
      <returns>The distribution that is appropriate for the given time.  Can return a null distribution, if the appropriate distribution has not yet been assigned to the node.</returns>
      <exception cref="T:System.InvalidOperationException">Raised when an appropriate distribution could not be found.</exception>
    </member>
    <member name="M:BayesServer.NodeDistributions.FindForTime(System.Int32,System.Int32@,BayesServer.NodeDistributionKind)">
      <summary>
            Finds the temporal distribution that is suitable for the time specified.
            </summary>
      <param name="time">The time.</param>
      <param name="temporalOrder">The temporal order associated with the distribution found.</param>
      <param name="kind">The kind of distribution to retrieve.</param>
      <returns>The distribution that is appropriate for the given time.  Can return a null distribution, if the appropriate distribution has not yet been assigned to the node.</returns>
      <exception cref="T:System.InvalidOperationException">Raised when an appropriate distribution could not be found.</exception>
    </member>
    <member name="P:BayesServer.NodeDistributions.Node">
      <summary>
            Gets the node that this instance belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributions.Keys">
      <summary>
            Gets the collection of node distribution keys that require distributions.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributions.MaxTemporalOrder">
      <summary>
            Gets the current maximum temporal order.
            </summary>
    </member>
    <member name="M:BayesServer.NodeDistributions.CanUpdate(BayesServer.NodeDistributionKey)">
      <summary>
            Determines whether the distribution at the specified temporal order can be updated.
            </summary>
      <param name="key">Properties identifying the distribution to check, such as temporal order/related node.</param>
      <returns>
        <c>true</c> if the distribution can be updated, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:BayesServer.NodeDistributions.CanUpdate(BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKind)">
      <summary>
            Determines whether the distribution at the specified temporal order can be updated.
            </summary>
      <param name="key">Properties identifying the distribution to check, such as temporal order/related node.</param>
      <param name="kind">The kind of distribution to check.</param>
      <returns>
        <c>true</c> if the distribution can be updated, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:BayesServer.NodeDistributions.ValidateDistribution(BayesServer.IDistribution,BayesServer.NodeDistributionKey)">
      <summary>
            Checks that a distribution is correctly specified for a particular temporal order.
            </summary>
      <param name="value">The distribution to test.</param>
      <param name="key">The properties that identify a particular distribution such as temporal order/related node.</param>
    </member>
    <member name="M:BayesServer.NodeDistributions.ValidateDistribution(BayesServer.IDistribution,BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKind)">
      <summary>
            Checks that a distribution is correctly specified for a particular temporal order.
            </summary>
      <param name="value">The distribution to test.</param>
      <param name="key">The properties that identify a particular distribution such as temporal order/related node.</param>
      <param name="kind">The kind of distribution to validate.</param>
    </member>
    <member name="P:BayesServer.NodeDistributions.Values">
      <summary>
            Gets all the probability distributions in the container.
            </summary>
    </member>
    <member name="P:BayesServer.NodeDistributions.Item(System.Int32)">
      <summary>
            Gets or sets a distribution at a particular temporal order.
            </summary>
      <remarks>
            When specifying temporal distributions, variables which belong to temporal nodes must have times associated.
            Each time must be specified relative to the current point in time which is defined as zero.  E.g. to specify a distribution at time&gt;=1
            we would include variables at time -1 and 0.
            </remarks>
      <param name="temporalOrder">The required temporal order.</param>
      <returns>The requested distribution, which can be null if the node does not support the requested temporal order, or if a distribution has not yet been assigned to that order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="temporalOrder" /> must be non negative.</exception>
    </member>
    <member name="P:BayesServer.NodeDistributions.Item(BayesServer.NodeDistributionKey)">
      <summary>
            Gets or sets a distribution with particular properties, such as temporal order.
            </summary>
      <remarks>
        <para>
            When specifying temporal distributions, variables which belong to temporal nodes must have times associated.
            Each time must be specified relative to the current point in time which is defined as zero.  E.g. to specify a distribution at time&gt;=1
            we would include variables at time -1 and 0.
            </para>
        <para>
            For noisy nodes, multiple distributions are required, one for each parent and a leak distribution. 
            </para>
      </remarks>
      <param name="key">The properties of the required distribution, such as temporal order.</param>
      <returns>The requested distribution, which can be null if the node does not support the requested temporal order, or if a distribution has not yet been assigned to that order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Temporal order must be non negative.</exception>
    </member>
    <member name="P:BayesServer.NodeDistributions.Item(BayesServer.NodeDistributionKind)">
      <summary>
            Gets or sets a particular kind of distribution on the node.
            </summary>
      <remarks>
        <para>
            For temporal or noisy nodes, use the overload which accepts both a key and kind.
            </para>
      </remarks>
    </member>
    <member name="P:BayesServer.NodeDistributions.Item(BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKind)">
      <summary>
            Gets or sets a distribution with particular properties, such as temporal order.
            </summary>
      <remarks>
        <para>
            When specifying temporal distributions, variables which belong to temporal nodes must have times associated.
            Each time must be specified relative to the current point in time which is defined as zero.  E.g. to specify a distribution at time&gt;=1
            we would include variables at time -1 and 0.
            </para>
        <para>
            For noisy nodes, multiple distributions are required, one for each parent and a leak distribution. 
            </para>
      </remarks>
      <param name="key">The properties of the required distribution, such as temporal order.</param>
      <param name="kind">The kind of distribution we are getting or setting.  This allows setting other distribution types than Probability, such as Experience</param>
      <returns>The requested distribution, which can be null if the node does not support the requested temporal order, or if a distribution has not yet been assigned to that order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Temporal order must be non negative.</exception>
    </member>
    <member name="P:BayesServer.NodeDistributions.Count">
      <summary>
            Gets the number of distributions in the container.
            </summary>
    </member>
    <member name="M:BayesServer.NodeDistributions.TryGetValue(BayesServer.NodeDistributionKey,BayesServer.IDistribution@)">
      <summary>
            Attempts to return the distribution with the specified key.
            </summary>
      <param name="key">The key (such as temporal order) of the distribution to return.</param>
      <param name="distribution">The distribution for the specified key.  Value can be null even if the temporal order exists.</param>
      <returns>
        <c>true</c> if the temporal order was found; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:BayesServer.NodeDistributions.TryGetValue(BayesServer.NodeDistributionKey,BayesServer.NodeDistributionKind,BayesServer.IDistribution@)">
      <summary>
            Attempts to return the distribution with the specified key.
            </summary>
      <param name="key">The key (such as temporal order) of the distribution to return.</param>
      <param name="distribution">The distribution for the specified key.  Value can be null even if the temporal order exists.</param>
      <param name="kind">The kind of distribution to return.</param>
      <returns>
        <c>true</c> if the temporal order was found; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:BayesServer.NodeDistributions.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:BayesServer.NodeGroup">
      <summary>
            Allows nodes to be assigned to one or more groups.
            </summary>
    </member>
    <member name="E:BayesServer.NodeGroup.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NodeGroup.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NodeGroup" /> class.
            </summary>
      <param name="name">The name of the group, which must be unique per <see cref="T:BayesServer.NodeGroup" />.</param>
    </member>
    <member name="P:BayesServer.NodeGroup.CustomProperties">
      <summary>
            Gets custom properties associated with this instance.
            </summary>
      <remarks>
            Custom properties allow storage of custom information, which will be saved with the network.
            </remarks>
    </member>
    <member name="M:BayesServer.NodeGroup.Copy">
      <summary>
            Makes a copy of this instance.
            </summary>
      <returns>The copy.</returns>
    </member>
    <member name="P:BayesServer.NodeGroup.Name">
      <summary>
            Gets the name, which must be unique per <see cref="T:BayesServer.NetworkNodeGroupCollection" />.
            </summary>
    </member>
    <member name="P:BayesServer.NodeGroup.Description">
      <summary>
            An optional description for the custom property.
            </summary>
    </member>
    <member name="P:BayesServer.NodeGroup.Parent">
      <summary>
            Gets the parent collection, if set, otherwise null.
            </summary>
    </member>
    <member name="T:BayesServer.NodeGroupCollection">
      <summary>
            Represents the collection of groups a node belongs to.
            </summary>
    </member>
    <member name="E:BayesServer.NodeGroupCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.NodeGroupCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.NodeGroupCollection.Node">
      <summary>
            The <see cref="T:BayesServer.Node" /> the collection belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.NodeGroupCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:BayesServer.NodeGroupCollection" /> instance.
            </summary>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.IndexOf(System.String)">
      <summary>
            Determines the index of a specific group in the collection.
            </summary>
      <param name="item">The node group name to find.  The value can be null.</param>
      <returns>The index of the group name in the collection, or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.Contains(System.String)">
      <summary>
            Determines whether a group name is in the collection.
            </summary>
      <param name="group">The group to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="group" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.Insert(System.Int32,System.String)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to add the element.</param>
      <param name="item">The item to insert.  Cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.Add(System.String)">
      <summary>
            Adds the group to the end of the collection.
            </summary>
      <param name="item">The group to add.  Cannot be null.  Duplicates are not allowed.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.Clear">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.Remove(System.String)">
      <summary>
            Removes the group from the collection.
            </summary>
      <param name="item">The group to be removed from the collection.</param>
      <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an element from the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to remove the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="P:BayesServer.NodeGroupCollection.Item(System.Int32)">
      <summary>
            Gets or sets the group at the specified index.
            </summary>
      <param name="index">The zero-based index of the group to find.</param>
      <returns>A group name.</returns>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.CopyTo(System.String[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:BayesServer.NodeGroupCollection.IsReadOnly">
      <summary>
            Determines whether the collection is read only.
            </summary>
    </member>
    <member name="M:BayesServer.NodeGroupCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:BayesServer.NodeGroupCollection" />.
            </summary>
      <returns>An enumerator for the entire collection.</returns>
    </member>
    <member name="T:BayesServer.NodeLinkCollection">
      <summary>
            Represents a read-only collection of links.  To add a link to a network see <see cref="P:BayesServer.Network.Links">Links</see>.
            </summary>
      <remarks>
        <see cref="P:BayesServer.Node.Links" />, <see cref="P:BayesServer.Node.LinksIn" /> and <see cref="P:BayesServer.Node.LinksOut" /> are instances of this class. 
            </remarks>
    </member>
    <member name="E:BayesServer.NodeLinkCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.NodeLinkCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.NodeLinkCollection.IndexOf(BayesServer.Link)">
      <summary>
            Searches for the specified object and returns the zero-based index of the <see cref="T:BayesServer.Link" /> within the entire collection, or -1 if not found.
            </summary>
      <param name="item">The <see cref="T:BayesServer.Link" /> to locate in the collection. The value can be null.</param>
      <returns>The zero-based index of the <see cref="T:BayesServer.Link" /> within the entire collection, if found; otherwise, –1.</returns>
    </member>
    <member name="M:BayesServer.NodeLinkCollection.Contains(BayesServer.Link)">
      <summary>
            Determines whether a <see cref="T:BayesServer.Link" /> is in the collection.
            </summary>
      <param name="item">The <see cref="T:BayesServer.Link" /> to locate in the collection. The value can be null.</param>
      <returns>true if item is found in the collection; otherwise, false.</returns>
    </member>
    <member name="P:BayesServer.NodeLinkCollection.Node">
      <summary>
            Gets the <see cref="T:BayesServer.Node" /> to which the collection belongs to.
            </summary>
      <value>The <see cref="T:BayesServer.Node" /> that the collection belongs to.</value>
    </member>
    <member name="M:BayesServer.NodeLinkCollection.CopyTo(BayesServer.Link[],System.Int32)">
      <summary>
            Copies all the items in the collection into the buffer <paramref name="array" /> starting at the specified destination <paramref name="arrayIndex" />.
            </summary>
      <param name="array">A buffer whose values will be overwritten.</param>
      <param name="arrayIndex">The destination index at which to start copying.</param>
    </member>
    <member name="M:BayesServer.NodeLinkCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:BayesServer.NodeLinkCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the entire <see cref="T:BayesServer.NodeLinkCollection" />.</returns>
    </member>
    <member name="P:BayesServer.NodeLinkCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:BayesServer.Link" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:BayesServer.Link" /> to find.</param>
      <returns>A <see cref="T:BayesServer.Link" />.</returns>
    </member>
    <member name="P:BayesServer.NodeLinkCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="T:BayesServer.NodeVariableCollection">
      <summary>
            Represents the collection of variables belonging to a <seealso cref="T:BayesServer.Node" />.
            </summary>
    </member>
    <member name="E:BayesServer.NodeVariableCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.NodeVariableCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.NodeVariableCollection.Node">
      <summary>
            The <see cref="T:BayesServer.Node" /> the collection belongs to.
            </summary>
    </member>
    <member name="P:BayesServer.NodeVariableCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:BayesServer.NodeVariableCollection" /> instance.
            </summary>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.IndexOf(BayesServer.Variable)">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.Variable" /> in the collection.
            </summary>
      <param name="item">The variable to find.  The value can be null.</param>
      <returns>The index of the variable in the collection, or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.Contains(BayesServer.Variable)">
      <summary>
            Determines whether a <see cref="T:BayesServer.Variable" /> is in the collection.
            </summary>
      <param name="variable">The <see cref="T:BayesServer.Variable" /> to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="variable" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.Insert(System.Int32,BayesServer.Variable)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to add the element.</param>
      <param name="item">The item to insert.  Cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the new variable already belongs to a node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.Add(BayesServer.Variable)">
      <summary>
            Adds the <see cref="T:BayesServer.Variable" /> to the end of the collection.
            </summary>
      <param name="item">The variable to add.  Cannot be null.  Duplicates are not allowed.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the new variable already belongs to a node.</exception>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.Clear">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.Remove(BayesServer.Variable)">
      <summary>
            Removes the <see cref="T:BayesServer.Variable" /> from the collection.
            </summary>
      <param name="item">The <see cref="T:BayesServer.Variable" /> to be removed from the collection.</param>
      <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the collection.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an element from the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to remove the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="P:BayesServer.NodeVariableCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:BayesServer.Variable" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:BayesServer.Variable" /> to find.</param>
      <returns>A <see cref="T:BayesServer.Variable" />.</returns>
    </member>
    <member name="P:BayesServer.NodeVariableCollection.Item(System.String)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.Variable" /> to find.</param>
      <returns>The <see cref="T:BayesServer.Variable" /> with the specified name; otherwise null.</returns>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.CopyTo(BayesServer.Variable[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:BayesServer.NodeVariableCollection.IsReadOnly">
      <summary>
            Determines whether the collection is read only.
            </summary>
    </member>
    <member name="M:BayesServer.NodeVariableCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:BayesServer.NodeVariableCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the entire collection.</returns>
    </member>
    <member name="T:BayesServer.NoisyOrder">
      <summary>
            Determines the order in which the states of a parent of a noisy node increasingly affect the noisy states.
            </summary>
    </member>
    <member name="F:BayesServer.NoisyOrder.Ascending">
      <summary>
            The states of the parent affect the noisy node states in increasing order.
            </summary>
      <remarks>
        <para>
            In this mode, the first state of the parent variable has no effect, then each subsequent state
            has increasing causal influence of the noisy node states.
            </para>
      </remarks>
    </member>
    <member name="F:BayesServer.NoisyOrder.Descending">
      <summary>
            The states of the parent affect the noisy node states in decreasing order.
            </summary>
      <remarks>
        <para>
            In this mode, the last state of the parent variable has no effect, and previous states have increasing
            causal influence over the noisy node states.
            </para>
      </remarks>
    </member>
    <member name="T:BayesServer.NoisyType">
      <summary>
            Identifies the noisy node type, if any.
            </summary>
      <seealso cref="T:BayesServer.NodeDistributionOptions" />
    </member>
    <member name="F:BayesServer.NoisyType.None">
      <summary>
            The node is not a noisy node.
            </summary>
    </member>
    <member name="F:BayesServer.NoisyType.NoisyOrMax">
      <summary>
            The node is a noisy or/max node.
            </summary>
    </member>
    <member name="T:BayesServer.NotInDomainException">
      <summary>
            Raised when the arguments to a mathematic function are not in the domain of the function (undefined).
            </summary>
    </member>
    <member name="M:BayesServer.NotInDomainException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NotInDomainException" /> class.
            </summary>
    </member>
    <member name="M:BayesServer.NotInDomainException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NotInDomainException" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:BayesServer.NotInDomainException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NotInDomainException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:BayesServer.NotSpdException">
      <summary>
            Raised when a matrix is not positive definite.
            </summary>
    </member>
    <member name="M:BayesServer.NotSpdException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NotSpdException" /> class.
            </summary>
    </member>
    <member name="M:BayesServer.NotSpdException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NotSpdException" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:BayesServer.NotSpdException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.NotSpdException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:BayesServer.ParameterCounter">
      <summary>
            Contains methods to determine the number of parameters in a Bayesian network or distribution.
            </summary>
    </member>
    <member name="M:BayesServer.ParameterCounter.GetParameterCount(BayesServer.Network)">
      <summary>
            Gets the number of parameters in a Bayesian network.
            </summary>
      <param name="network">The network.</param>
      <returns>The number of parameters.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="network" /> is null.</exception>
    </member>
    <member name="M:BayesServer.ParameterCounter.GetParameterCount(BayesServer.Network,BayesServer.ParameterCountOptions)">
      <summary>
            Gets the number of parameters in a Bayesian network.
            </summary>
      <param name="network">The network.</param>
      <param name="options">Options governing the parameter count.</param>
      <returns>The number of parameters.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="network" /> is null.</exception>
    </member>
    <member name="M:BayesServer.ParameterCounter.GetParameterCount(BayesServer.Node,System.Int32)">
      <summary>
            Gets the parameter count for an individual node distribution.
            </summary>
      <param name="node">The node that owns the distribution.</param>
      <param name="order">The distribution order.  Always zero for non temporal nodes.</param>
      <returns>The parameter count.</returns>
    </member>
    <member name="M:BayesServer.ParameterCounter.GetParameterCount(BayesServer.Node,BayesServer.NodeDistributionKey)">
      <summary>
            Gets the parameter count for an individual node distribution.
            </summary>
      <param name="node">The node that owns the distribution.</param>
      <param name="key">The distribution key.  Order is always zero for non temporal nodes.</param>
      <returns>The parameter count.</returns>
    </member>
    <member name="T:BayesServer.ParameterCountOptions">
      <summary>
            Options for <see cref="T:BayesServer.ParameterCounter" />.
            </summary>
    </member>
    <member name="P:BayesServer.ParameterCountOptions.ExcludeNullDistributions">
      <summary>
            Gets or sets a value indicating whether null distributions are excluded from the parameter count.
            </summary>
      <value>
        <c>true</c> if null distributions should be excluded; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:BayesServer.PropagationMethod">
      <summary>
            The propagation method used during inference.
            </summary>
    </member>
    <member name="F:BayesServer.PropagationMethod.Sum">
      <summary>
            Sum propagation is the default method, used to perform standard probabilistic inference.
            </summary>
    </member>
    <member name="F:BayesServer.PropagationMethod.Max">
      <summary>
            Max propagation is used to determine the most probable configuration of discrete variables, given any evidence entered.  Also known as Most Probable Explanation (MPE).
            </summary>
    </member>
    <member name="T:BayesServer.State">
      <summary>
            Represents a state of a variable.  E.g. the discrete variable Gender might have two states, Male and Female.
            </summary>
      <remarks>Note that a continuous variable always has a single state.</remarks>
    </member>
    <member name="M:BayesServer.State.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.State" /> class.
            </summary>
    </member>
    <member name="M:BayesServer.State.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.State" /> class with the specified <paramref name="name" />.
            </summary>
      <param name="name">The name for the state.  Can be null.</param>
    </member>
    <member name="M:BayesServer.State.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.State" /> class with the specified <paramref name="name" /> and <paramref name="value" />.
            </summary>
      <param name="name">The name for the state.  Can be null.</param>
      <param name="value">Optional value for the state.  When the state is added to a variable, this value must be compatible with the <see cref="T:BayesServer.StateValueType" /> set on the variable.</param>
    </member>
    <member name="E:BayesServer.State.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.State.CustomProperties">
      <summary>
            Gets custom properties associated with this instance.
            </summary>
      <remarks>
            Custom properties allow storage of custom information, which will be saved with the network.
            </remarks>
    </member>
    <member name="P:BayesServer.State.Description">
      <summary>
            Gets or sets an optional description for the state.
            </summary>
    </member>
    <member name="P:BayesServer.State.Index">
      <summary>
            Gets the index of the state in a variable's <see cref="P:BayesServer.Variable.States" /> collection.  Equals -1 if the <see cref="T:BayesServer.State" /> does not belong to a variable.
            </summary>
    </member>
    <member name="P:BayesServer.State.Name">
      <summary>
            Gets or sets the name of the state.
            </summary>
    </member>
    <member name="P:BayesServer.State.States">
      <summary>
            Gets the <see cref="T:BayesServer.StateCollection" /> the state belongs to, if any.
            </summary>
      <value>The <see cref="T:BayesServer.StateCollection" /> that this instance belongs to.  Can be null.</value>
    </member>
    <member name="P:BayesServer.State.Value">
      <summary>
            Gets or sets an optional value for a state, such as an interval for discretized variables.
            </summary>
      <remarks>When a <see cref="T:BayesServer.State" /> is added to a <see cref="T:BayesServer.Variable" /> this value must be compatible with the <see cref="T:BayesServer.StateValueType" /> set on the variable.</remarks>
    </member>
    <member name="P:BayesServer.State.Variable">
      <summary>
            Gets the <see cref="T:BayesServer.Variable" /> the state belongs to, if any.
            </summary>
      <remarks>If this instance is a child of another state, the state hierarchy is traversed to reach the variable of the root state, if any.</remarks>
      <value>The <see cref="T:BayesServer.Variable" /> that this instance belongs to.  Can be null.</value>
    </member>
    <member name="M:BayesServer.State.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A new <see cref="T:BayesServer.State" /> instance.</returns>
    </member>
    <member name="M:BayesServer.State.ToString">
      <summary>
            Returns the name of the state, or an empty string if the name is null.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing the name of the state which is empty if the name is null.
            </returns>
    </member>
    <member name="T:BayesServer.StateCollection">
      <summary>
            Represents a collection of states belonging to a <see cref="T:BayesServer.Variable" />.
            </summary>
      <remarks>Note that a continuous variable always has a single state.</remarks>
      <seealso cref="T:BayesServer.State" />
    </member>
    <member name="E:BayesServer.StateCollection.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="E:BayesServer.StateCollection.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.StateCollection.Count">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.StateCollection.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.StateCollection.Variable">
      <summary>
            Gets the <see cref="T:BayesServer.Variable" /> this collection belongs to.  This is null if this is a child state collection.
            </summary>
      <value>The variable that owns this collection.</value>
    </member>
    <member name="P:BayesServer.StateCollection.Item(System.String)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.State" /> to find.</param>
      <returns>A <see cref="T:BayesServer.State" /> with the specified name if found; otherwise null.</returns>
    </member>
    <member name="P:BayesServer.StateCollection.Item(System.String,System.Boolean)">
      <summary>
            Performs a case sensitive lookup.
            </summary>
      <param name="name">The name of the <see cref="T:BayesServer.State" /> to find.</param>
      <param name="throwIfNotFound">When <c>true</c> throws an exception if the name is not found.</param>
      <returns>The <see cref="T:BayesServer.State" /> with the specified name; otherwise null.</returns>
    </member>
    <member name="M:BayesServer.StateCollection.FindByValue(System.Object)">
      <summary>
            Finds the state whose <see cref="P:BayesServer.State.Value">value</see>/&gt; matches the given <paramref name="value" />, or null if a match is not found.
            </summary>
      <remarks>
            For discretized variables, each <see cref="P:BayesServer.State.Value" /> is an <see cref="T:BayesServer.Interval{T}" />, and this method returns the state
            whose interval contains the given <paramref name="value" />.
            </remarks>
      <param name="value">The value to match to a <see cref="P:BayesServer.State.Value" />.</param>
      <returns>The matching <see cref="T:BayesServer.State" /> or null if a match is not found.</returns>
    </member>
    <member name="P:BayesServer.StateCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:BayesServer.State" /> at the specified index.
            </summary>
      <value>The state.</value>
    </member>
    <member name="M:BayesServer.StateCollection.Add(BayesServer.State)">
      <inheritdoc />
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:BayesServer.StateCollection.Clear">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.StateCollection.Contains(BayesServer.State)">
      <summary>
            Determines whether a <see cref="T:BayesServer.State" /> is in the collection.  The operation is O(1).
            </summary>
      <param name="item">The <see cref="T:BayesServer.State" /> to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.StateCollection.CopyTo(BayesServer.State[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.StateCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:BayesServer.StateCollection.IndexOf(BayesServer.State)">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.State" /> in the collection.  This operation is O(1).
            </summary>
      <param name="item">The state to find. The value can be null.</param>
      <returns>The index of the state in the collection, or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.StateCollection.Insert(System.Int32,BayesServer.State)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to add the element.</param>
      <param name="item">The item to insert.  Cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="item" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if the state already belongs to a network.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="M:BayesServer.StateCollection.Remove(BayesServer.State)">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.StateCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an element from the collection at the specified index.
            </summary>
      <param name="index">The zero based index at which to remove the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than the collection count.</exception>
    </member>
    <member name="T:BayesServer.StateContext">
      <summary>
            Identifies a <see cref="T:BayesServer.State" /> and contextual information such as the time (zero based).
            </summary>
    </member>
    <member name="M:BayesServer.StateContext.#ctor(BayesServer.State,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of <see cref="T:BayesServer.StateContext" />.
            </summary>
      <param name="state">The State.</param>
      <param name="time">The associated time if the state belongs to a temporal node, or null otherwise.</param>
    </member>
    <member name="P:BayesServer.StateContext.State">
      <summary>
            Gets the State.
            </summary>
    </member>
    <member name="P:BayesServer.StateContext.Time">
      <summary>
            Gets the zero based time associated with the state if the state belongs to a temporal node, or null otherwise.
            </summary>
    </member>
    <member name="T:BayesServer.StateValueType">
      <summary>
            The type of value represented by a <see cref="T:BayesServer.State" />.
            </summary>
      <remarks>
            This setting determines the type of values that <see cref="P:BayesServer.State.Value" /> can have.
            </remarks>
    </member>
    <member name="F:BayesServer.StateValueType.None">
      <summary>
            A <see cref="T:BayesServer.State" /> has no value.  It will still have a name however.
            </summary>
    </member>
    <member name="F:BayesServer.StateValueType.DoubleInterval">
      <summary>
            The <see cref="T:BayesServer.State" /> value is an interval specified using double precision numbers.
            </summary>
    </member>
    <member name="F:BayesServer.StateValueType.Integer">
      <summary>
            A <see cref="T:BayesServer.State" /> can have a integer value.
            </summary>
    </member>
    <member name="F:BayesServer.StateValueType.Boolean">
      <summary>
            A <see cref="T:BayesServer.State" /> can have a boolean value.
            </summary>
    </member>
    <member name="T:BayesServer.Table">
      <summary>
            Used to represent probability distributions, conditional probability distributions, joint probability distributions and more general potentials, over a number of discrete variables.
            </summary>
      <remarks>
            The order of variables in a table is determined by the order in which variables are created (and also time for temporal variables).  However we recommend that you avoid using functions that require any knowledge of this ordering unless you are writing low level functions.
            Instead of needing an index, you can use the get and set methods that take States/Variables as parameters. (indexer methods for C#).  This renders the ordering an implementation detail.
            </remarks>
      <remarks>
            The variables in a <see cref="T:BayesServer.Table" /> are automatically sorted by time (if any) and <see cref="T:BayesServer.Variable" />.  This is for computational reasons.
            <para>
            The <see cref="T:BayesServer.Table" /> class stores it's values in a zero based 1-dimensional array, and the right most variable's states toggle fastest.
            For example if a <see cref="T:BayesServer.Table" /> contains 3 binary variables {A,B,C} all with states {T,F} the table layout
            would be as follows.
            </para><div class="tablediv"><table><tr valign="top"><th>A</th><th>B</th><th>C</th><th>Index</th></tr><tr valign="top"><td>T</td><td>T</td><td>T</td><td>0</td></tr><tr valign="top"><td>T</td><td>T</td><td>F</td><td>1</td></tr><tr valign="top"><td>T</td><td>F</td><td>T</td><td>2</td></tr><tr valign="top"><td>T</td><td>F</td><td>F</td><td>3</td></tr><tr valign="top"><td>F</td><td>T</td><td>T</td><td>4</td></tr><tr valign="top"><td>F</td><td>T</td><td>F</td><td>5</td></tr><tr valign="top"><td>F</td><td>F</td><td>T</td><td>6</td></tr><tr valign="top"><td>F</td><td>F</td><td>F</td><td>7</td></tr></table></div>
            If a different variable ordering is required see the <see cref="T:BayesServer.TableIterator" /> and <see cref="T:BayesServer.TableAccessor" /> classes.
            </remarks>
      <seealso cref="T:BayesServer.TableAccessor" />
      <seealso cref="T:BayesServer.TableIterator" />
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Table,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class, with the same structure as an existing <paramref name="table" />, copying the values if requested.
            </summary>
      <param name="table">The table to copy.</param>
      <param name="copyValues">if set to <c>true</c> the values from <paramref name="table" /> are copied, otherwise all values are initialized to zero.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Table,System.Boolean,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class, with the same structure as an existing <paramref name="table" />, copying the values if requested, and optionally shifting any times.
            </summary>
      <param name="table">The table to copy.</param>
      <param name="copyValues">if set to <c>true</c> the values from <paramref name="table" /> are copied, otherwise all values are initialized to zero.</param>
      <param name="timeShift">If supplied shifts any times embedded in the source table by the specified number of units.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.NonZero">
      <summary>
            Returns any non zero table values, keyed by index.
            </summary>
      <returns>All non zero table values, keyed by table index.</returns>
    </member>
    <member name="M:BayesServer.Table.GetMaxValue(System.Int32@)">
      <summary>
            Gets the maximum table value, and the index at which it occurs.
            </summary>
      <param name="index">The first index at which the maximum value occurs.</param>
      <returns>The maximum table value.</returns>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Variable)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with a single <see cref="T:BayesServer.Variable" />.  All values are initialized to zero.
            </summary>
      <param name="variable">The variable.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.VariableContext)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class from a single <see cref="T:BayesServer.VariableContext" />.  All values are initialized to zero.
            </summary>
      <param name="variableContext">The variable context.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="variableContext" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified variables.  All values are initialized to zero.
            </summary>
      <param name="variables">The variables.</param>
      <exception cref="T:System.ArgumentException">Raised if a duplicate variable is detected in <paramref name="variables" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.Variable},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified variables.  All values are initialized to zero.
            </summary>
      <param name="variables">The variables.</param>
      <param name="headTail">Specifies whether the variables should be marked as Head or Tail.</param>
      <exception cref="T:System.ArgumentException">Raised if a duplicate variable is detected in <paramref name="variables" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.Variable},System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified variables, at an optional time.  All values are initialized to zero.
            </summary>
      <param name="variables">The variables.</param>
      <param name="time">The time for the variables.  Can be null.</param>
      <exception cref="T:System.ArgumentException">Raised if a duplicate variable/time combination is detected in <paramref name="variables" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.Variable},System.Nullable{System.Int32},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified variables, at an optional time.  All values are initialized to zero.
            </summary>
      <param name="variables">The variables.</param>
      <param name="time">The time for the variables.  Can be null.</param>
      <param name="headTail">Specifies whether the variables should be marked as Head or Tail.</param>
      <exception cref="T:System.ArgumentException">Raised if a duplicate variable/time combination is detected in <paramref name="variables" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.VariableContextCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the variables specified in <paramref name="variableContexts" />.  All values are initialized to zero.
            </summary>
      <param name="variableContexts">The variables, times, and head/tail specifications to include in the distribution.</param>
      <exception cref="T:System.ArgumentException">Raised if a duplicate variable-time combination is detected in <paramref name="variableContexts" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.VariableContext})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with <paramref name="variableContexts" /> specifying which variables to include in the distribution.  All distribution values are initialized to zero.
            </summary>
      <param name="variableContexts">The variables, times and head/tail specification.</param>
      <remarks>
            Each <see cref="T:BayesServer.VariableContext" /> identifies the variable to be included and allows times to be specified for any temporal variables used in Dynamic Bayesian networks.
            Time must be null unless the variable belongs to a temporal node.
            <para>
            Each variable is also marked as head or tail.  Head variables are those on the left,
            and tail variables are those on the right in the expression P(A|B).
            </para></remarks>
      <exception cref="T:System.ArgumentException">Raised if a variable-time combination is duplicated in <paramref name="variableContexts" />, or if a variable has zero states.
            Note that a variable can appear more than once if the associated times are different.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.VariableContext},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with <paramref name="variableContexts" /> specifying which variables to include in the distribution.  All distribution values are initialized to zero.
            </summary>
      <param name="variableContexts">The variables and any times.</param>
      <param name="headTail">Overrides the Head or Tail value found in each <see cref="T:BayesServer.VariableContext" />.</param>
      <remarks>
            Each <see cref="T:BayesServer.VariableContext" /> identifies the variable to be included and allows times to be specified for any temporal variables used in Dynamic Bayesian networks.
            Time must be null unless the variable belongs to a temporal node.
            <para>
            Each variable is also marked as head or tail.  Head variables are those on the left,
            and tail variables are those on the right in the expression P(A|B).
            </para></remarks>
      <exception cref="T:System.ArgumentException">Raised if a variable-time combination is duplicated in <paramref name="variableContexts" />, or if a variable has zero states.
            Note that a variable can appear more than once if the associated times are different.</exception>
    </member>
    <member name="M:BayesServer.Table.TimeShift(System.Int32)">
      <summary>
            Shifts any times associated with the table variables by the specified number of units.
            </summary>
      <param name="units">The number of time units to shift.  Can be negative if required.</param>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="P:BayesServer.Table.Locked">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.Table.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.Table.Randomize(System.Random)">
      <summary>
            Randomizes the distribution such that each parent combination sums to 1.
            </summary>
      <param name="random">Random number generator.</param>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.Normalize(System.Boolean)">
      <summary>
            Normalizes the distribution such that each parent combination sums to 1.
            </summary>
      <param name="unifyZeroSum">If true, applies a uniform distribution to any parent combinations that sum to zero.</param>
      <returns>
        <c>false</c> if a zero sum was found for any parent combination; <c>true</c> otherwise</returns>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.Normalize">
      <summary>
            Normalizes the distribution such that each parent combination sums to 1.
            </summary>
      <returns>
        <c>false</c> if a zero sum was found for any parent combination; <c>true</c> otherwise.</returns>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.ToString">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Variable[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified variables.  All values are initialized to zero.
            </summary>
      <param name="variables">The variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="variables" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if a duplicate variable-time combination is detected in <paramref name="variables" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.VariableContext[],System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with <paramref name="count" /> variable contexts taken from <paramref name="buffer" />.  All values are initialized to zero.
            </summary>
      <param name="buffer">The buffer of <see cref="T:BayesServer.VariableContext" /> instances.</param>
      <param name="count">The number of items to read from <paramref name="buffer" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if a null or duplicate variable-time combination is detected in <paramref name="buffer" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.VariableContext[],System.Int32,BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with <paramref name="count" /> variable contexts taken from <paramref name="buffer" />.  All values are initialized to zero.
            </summary>
      <param name="buffer">The buffer of <see cref="T:BayesServer.VariableContext" /> instances.</param>
      <param name="count">The number of items to read from <paramref name="buffer" />.</param>
      <param name="headTail">Overrides the Head or Tail value found in each <see cref="T:BayesServer.VariableContext" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if a null or duplicate variable-time combination is detected in <paramref name="buffer" />, or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Node,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified node variable at the specified time.  All values are initialized to zero.
            </summary>
      <param name="node">The node whose variable is used to construct the <see cref="T:BayesServer.Table" />.</param>
      <param name="time">The time for the node variable.  Can be null.</param>
      <exception cref="T:System.ArgumentException">Raised if a node variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with a single <see cref="T:BayesServer.Variable" /> and time.  All values are initialized to zero.
            </summary>
      <param name="variable">The variable.</param>
      <param name="time">The variable time. Can be null for non temporal nodes.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="variable" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.Node})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with all the variables from the supplied nodes.  All values are initialized to zero.
            </summary>
      <param name="nodes">The <see cref="T:BayesServer.Node" /> instances.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="nodes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if a null or duplicate variable is detected or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Node[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with all the variables from the supplied nodes.  All values are initialized to zero.
            </summary>
      <param name="nodes">The <see cref="T:BayesServer.Node" /> instances.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="nodes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if a null or duplicate variable is detected or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(System.Collections.Generic.IList{BayesServer.Node},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with all the variables from the supplied nodes.  All values are initialized to zero.
            </summary>
      <param name="nodes">The <see cref="T:BayesServer.Node" /> instances.</param>
      <param name="headTail">Specifies whether the node variables should be marked as Head or Tail.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="nodes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if a null or duplicate variable is detected or if a variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class, copying the <paramref name="table" /> passed in.
            </summary>
      <param name="table">The table to copy.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Table,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class, copying the <paramref name="table" /> passed in, however adjusting any times by the <paramref name="timeShift" />.
            </summary>
      <param name="table">The table to copy.</param>
      <param name="timeShift">The number of units to shift any time values associated with variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="table" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.#ctor(BayesServer.Node)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Table" /> class with the specified node variables.  All values are initialized to zero.
            </summary>
      <param name="node">The node whose variables are used to construct the <see cref="T:BayesServer.Table" />.</param>
      <exception cref="T:System.ArgumentException">Raised if a node variable has zero states.</exception>
    </member>
    <member name="M:BayesServer.Table.Copy">
      <summary>
            Creates a copy of the distribution.  The new distribution will not have an owner.
            </summary>
      <returns>A copy of this instance.</returns>
    </member>
    <member name="M:BayesServer.Table.Copy(System.Nullable{System.Int32})">
      <summary>
            Creates a copy of the distribution, and shifts any times associated with variables by the specified amount.  The new distribution will not have an owner.
            </summary>
      <param name="timeShift">The amount to shift any times present in the distribution.  Can be negative.</param>
      <returns>
            A copy of this instance, with shifted times.
            </returns>
    </member>
    <member name="P:BayesServer.Table.Owner">
      <summary>
            Gets the current owner, if assigned to a node.  A distribution cannot be modified when it is assigned to a node.
            </summary>
      <value>The owner, or null if not assigned to a node.</value>
    </member>
    <member name="M:BayesServer.Table.AreAllValuesNonZero">
      <summary>
            Returns true if none of the values in the <see cref="T:BayesServer.Table" /> equal zero, or false otherwise.
            </summary>
      <returns>True if none of the values are zero; false otherwise.</returns>
    </member>
    <member name="M:BayesServer.Table.CopyFrom(System.Double[])">
      <summary>
            Copies values from the array into the table.
            </summary>
      <param name="data">Values to copy.  The array can be shorter or longer than the <see cref="P:BayesServer.Table.Count" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="data" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.Add(BayesServer.Table)">
      <summary>
            Adds the values from another table into this instance.  Only the <seealso cref="P:BayesServer.Table.Count" /> of each table need match.
            </summary>
      <param name="source">A table whose <seealso cref="P:BayesServer.Table.Count" /> matches this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if the <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the table counts do not match</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.CopyTo(BayesServer.Table)">
      <summary>
            Copies all values from this instance to the destination <see cref="T:BayesServer.Table" />.
            </summary>
      <param name="destination">The destination table, which can have a count greater than or equal to this instance.</param>
      <exception cref="T:System.InvalidOperationException">Raised if the destination table is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.CopyTo(System.Double[])">
      <summary>
            Copies the table values to an array.
            </summary>
      <param name="destination">The destination array, which must have length equal to or greater than this the count of this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="destination" /> is too short.</exception>
    </member>
    <member name="M:BayesServer.Table.AddAll(System.Double)">
      <summary>
            Adds the specified value onto all table elements.
            </summary>
      <param name="value">The value to add.  Can be negative.</param>
    </member>
    <member name="M:BayesServer.Table.SetAll(System.Double)">
      <summary>
            Sets all values in the <see cref="T:BayesServer.Table" /> to a specified value.
            </summary>
      <param name="value">The value to set all elements to.</param>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.StateRepeat(System.Int32)">
      <summary>
            Gets the number of times each state is repeated for a <see cref="T:BayesServer.Variable" /> in the <see cref="T:BayesServer.Table" /> layout.   See <see cref="T:BayesServer.Table" /> for details on layout.
            </summary>
      <param name="index">The index into <see cref="P:BayesServer.Table.SortedVariables" />.</param>
      <returns>The repeat count for each state.</returns>
    </member>
    <member name="M:BayesServer.Table.StateCount(System.Int32)">
      <summary>
            Gets the number of states of a variable at the time this instance was constructed.
            </summary>
      <param name="index">The index into <see cref="P:BayesServer.Table.SortedVariables" />.</param>
      <returns>The state count.</returns>
    </member>
    <member name="P:BayesServer.Table.Count">
      <summary>
            The data count in the <see cref="T:BayesServer.Table" />.  Equals the product of states for each <see cref="T:BayesServer.Variable" />.
            </summary>
      <value>The data count.</value>
    </member>
    <member name="P:BayesServer.Table.Item(BayesServer.State[])">
      <summary>
            Gets or sets the table value corresponding to the given states.
            </summary>
      <param name="states">The variable states that together specify a unique value in this table.</param>
      <remarks>
            For example, if the table represents P(A|B) we can access the value corresponding to P(A=True | B=False) by passing in the states A=True and B=False.</remarks>
      <returns>The table value.</returns>
    </member>
    <member name="P:BayesServer.Table.Item(BayesServer.StateContext[])">
      <summary>
            Gets or sets the table value corresponding to the given states and associated times.
            </summary>
      <param name="states">The variable states and times that together specify a unique value in this table.</param>
    </member>
    <member name="M:BayesServer.Table.GetSortedIndex(BayesServer.State[])">
      <summary>
            Gets the index of the table element that corresponds to a particular combination of states.
            </summary>
      <param name="states">A state for each variable.</param>
      <returns>The index corresponding to the states.</returns>
    </member>
    <member name="M:BayesServer.Table.GetSortedIndex(BayesServer.StateContext[])">
      <summary>
            Gets the index of the table element that corresponds to a particular combination of states and their times.
            </summary>
      <param name="stateContexts">A state and time for each variable. Time can be null for non temporal variables.</param>
      <returns>The index corresponding to the states.</returns>
    </member>
    <member name="P:BayesServer.Table.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:BayesServer.Table" /> value at the specified index into the 1-dimensional array.  See <see cref="T:BayesServer.Table" /> for information on how entries are stored.
            </summary>
      <param name="index">The index into the underlying 1-dimensional array.</param>
      <returns>The value at the specified index.</returns>
    </member>
    <member name="P:BayesServer.Table.SortedVariables">
      <summary>
            Gets the collection of variables in the distribution, sorted by time (which may be null) and the order in which variables were created.
            </summary>
      <remarks>
            All variables in each distribution are sorted, based on their creation order.  This is for computational reasons.
            If you want to access the values with respect to a different variable ordering, see the <see cref="T:BayesServer.TableIterator" /> and <see cref="T:BayesServer.TableAccessor" /> classes.
            </remarks>
      <value>Variables sorted by time and the order variables were created.</value>
    </member>
    <member name="M:BayesServer.Table.Sum">
      <summary>
            Calculates the sum of all values in the <see cref="T:BayesServer.Table" />.
            </summary>
      <returns>The sum of all table values.</returns>
    </member>
    <member name="M:BayesServer.Table.Divide(BayesServer.IDistribution)">
      <summary>
            Creates a new distribution by dividing this instance by the <paramref name="subset" />.  Also known as the complement.
            </summary>
      <remarks>If the resulting distribution were subsequently multiplied by <paramref name="subset" />, the result would be equivalent to this instance.</remarks>
      <param name="subset">The subset to divide by.</param>
      <returns>The new distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="subset" /> is null.</exception>
    </member>
    <member name="M:BayesServer.Table.DivideInPlace(BayesServer.Table)">
      <summary>
            Divides this instance in place by the <paramref name="subset" />.  Also known as the complement.
            </summary>
      <remarks>
        <para>
            The term 'in place' means that this instance is modified, instead of creating a new distribution.
            </para>
            If the resulting distribution were subsequently multiplied by <paramref name="subset" />, the result would be equivalent to this instance.
            </remarks>
      <param name="subset">The subset to divide by.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="subset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.Instantiate(System.Nullable{System.Double}[])">
      <summary>
            Creates a table with a subset of variables by setting hard evidence on one or more variables.
            </summary>
      <remarks>
        <paramref name="values" /> should contain one entry for each <seealso cref="T:BayesServer.VariableContext" /> in
            the distribution, however entries can be null.
            </remarks>
      <param name="values">An array of nullable state indexes, one for each variable in this <see cref="T:BayesServer.Table" /> instance.  Values are null for variables with no evidence.</param>
      <returns>The <see cref="T:BayesServer.Table" /> of instantiated values.  I.e.  The table after some variables have been set.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="values" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the length of <paramref name="values" /> does not equal the number of variables in the table.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.Instantiate(System.Nullable{System.Int32}[])">
      <summary>
            Creates a table with a subset of variables by setting hard evidence on one or more variables.
            </summary>
      <param name="values">An array of nullable state indexes, one for each variable in this <see cref="T:BayesServer.Table" /> instance.  Values are null for variables with no evidence.</param>
      <returns>The <see cref="T:BayesServer.Table" /> of instantiated values.  I.e.  The table after some variables have been set.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="values" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the length of <paramref name="values" /> does not equal the number of variables in the table.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.Marginalize(BayesServer.IDistribution)">
      <summary>
            Marginalizes (sums) the <paramref name="superset" /> into this instance.  
            </summary>
      <remarks>
            This method initializes all values to zero before performing the marginalization.
            If you know that all the values are zero (e.g. when a <see cref="T:BayesServer.Table" /> is first created), call an overloaded version of this method.
            </remarks>
      <param name="superset">A <see cref="T:BayesServer.Table" /> whose variables form a superset of the variables in this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.Marginalize(BayesServer.IDistribution,BayesServer.PropagationMethod)">
      <summary>
            Marginalizes (sums) the <paramref name="superset" /> into this instance.  
            </summary>
      <remarks>
            This method initializes all values to zero before performing the marginalization.
            If you know that all the values are zero (e.g. when a <see cref="T:BayesServer.Table" /> is first created), call an overloaded version of this method.
            </remarks>
      <param name="superset">A <see cref="T:BayesServer.Table" /> whose variables form a superset of the variables in this instance.</param>
      <param name="propagation">The propagation method to use during marginalization.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.Marginalize(BayesServer.Table)">
      <summary>
            Marginalizes (sums) the <paramref name="superset" /> into this instance.  
            </summary>
      <remarks>
            This method initializes all values to zero before performing the marginalization.
            If you know that all the values are zero (e.g. when a <see cref="T:BayesServer.Table" /> is first created), call an overloaded version of this method.
            </remarks>
      <param name="superset">A <see cref="T:BayesServer.Table" /> whose variables form a superset of the variables in this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.Marginalize(BayesServer.Table,BayesServer.PropagationMethod)">
      <summary>
            Marginalizes (sums) the <paramref name="superset" /> into this instance.  
            </summary>
      <remarks>
            This method initializes all values to zero before performing the marginalization.
            If you know that all the values are zero (e.g. when a <see cref="T:BayesServer.Table" /> is first created), call an overloaded version of this method.
            </remarks>
      <param name="superset">A <see cref="T:BayesServer.Table" /> whose variables form a superset of the variables in this instance.</param>
      <param name="propagation">The propagation method to use during marginalization.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.Marginalize(BayesServer.Table,System.Boolean)">
      <summary>
            Marginalizes (sums) the <paramref name="superset" /> into this instance.  
            </summary>
      <remarks>By default all table values are zero, however if the <see cref="T:BayesServer.Table" /> values are not zero the <paramref name="initialize" /> parameter avoids the need to
            initialize all values in the distribution to 0 before performing the marginalization.
            </remarks>
      <param name="superset">A <see cref="T:BayesServer.Table" /> whose variables form a superset of the variables in this instance.</param>
      <param name="initialize">Set to <c>true</c> if all values should be initialized to 0 before the marginalization.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.Marginalize(BayesServer.Table,System.Boolean,BayesServer.PropagationMethod)">
      <summary>
            Marginalizes (sums) the <paramref name="superset" /> into this instance.  
            </summary>
      <remarks>By default all table values are zero, however if the <see cref="T:BayesServer.Table" /> values are not zero the <paramref name="initialize" /> parameter avoids the need to
            initialize all values in the distribution to 0 before performing the marginalization.
            </remarks>
      <param name="superset">A <see cref="T:BayesServer.Table" /> whose variables form a superset of the variables in this instance.</param>
      <param name="initialize">Set to <c>true</c> if all values should be initialized to 0 before the marginalization.</param>
      <param name="propagation">The propagation method to use during marginalization.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="superset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="superset" /> does not contain all the variables in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.MarginalizeLowMemory(BayesServer.Table[])">
      <summary>
            Marginalizes (sums) the combined <paramref name="tables" />, without requiring the memory for the combined distribution.
            </summary>
      <remarks>
            This method uses very little memory, however in general will perform worse than the standard Marginalize routines.
            </remarks>
      <param name="tables">The tables whose combined distribution you wish to marginalize.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="tables" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
    </member>
    <member name="T:BayesServer.Table.MarginalizeLowMemoryOptions">
      <summary>
            Options controlling <see cref="M:BayesServer.Table.MarginalizeLowMemory" />.
            </summary>
    </member>
    <member name="P:BayesServer.Table.MarginalizeLowMemoryOptions.Cancellation">
      <summary>
            Used to cancel a long running operation.
            </summary>
    </member>
    <member name="P:BayesServer.Table.MarginalizeLowMemoryOptions.Propagation">
      <summary>
            Gets or sets the propagation method to use during marginalization.
            </summary>
    </member>
    <member name="M:BayesServer.Table.MarginalizeLowMemory(BayesServer.Table[],BayesServer.Table.MarginalizeLowMemoryOptions)">
      <summary>
            Marginalizes (sums) the combined <paramref name="tables" />, without requiring the memory for the combined distribution.
            </summary>
      <remarks>
            This method uses very little memory, however in general will perform worse than the standard Marginalize routines.
            </remarks>
      <param name="tables">The tables whose combined distribution you wish to marginalize.</param>
      <param name="options">Options governing the method, including cancellation.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="tables" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
    </member>
    <member name="M:BayesServer.Table.Multiply(BayesServer.IDistribution)">
      <summary>
            Creates a new distribution by multiplying this instance by another distribution.
            </summary>
      <param name="distribution">A distribution to multiply by.</param>
      <returns>A new combined distribution.</returns>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="distribution" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the variables in <paramref name="distribution" /> are not contained in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.MultiplyInPlace(System.Double)">
      <summary>
            Multiplies all values in the distribution by the specified value.
            </summary>
      <param name="value">The value to multiply by.</param>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only.</exception>
    </member>
    <member name="M:BayesServer.Table.MultiplyInPlace(BayesServer.Table)">
      <summary>
            Multiplies the <paramref name="subset" /> into this instance.  
            </summary>
      <remarks>
        <para>
            The term 'in place' means that this instance is modified, instead of creating a new distribution.
            </para>
            By default all table values are zero, so if the <see cref="T:BayesServer.Table" /> needs to be initialized to 1 before multiplication use a different overload of this method.
            </remarks>
      <param name="subset">A <see cref="T:BayesServer.Table" /> whose variables form a subset of the variables in this instance.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="subset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is currently read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if the variables in <paramref name="subset" /> are not contained in this instance.</exception>
    </member>
    <member name="M:BayesServer.Table.MultiplyInPlace(BayesServer.Table,System.Boolean)">
      <summary>
            Multiplies the <paramref name="subset" /> into this instance.  
            </summary>
      <remarks>
        <para>
            The term 'in place' means that this instance is modified, instead of creating a new distribution.
            </para>
            By default all table values are zero, so the <paramref name="initialize" /> parameter avoids the need to
            initialize all values in the distribution to 1 before performing the multiplication.
            </remarks>
      <param name="subset">A <see cref="T:BayesServer.Table" /> whose variables form a subset of the variables in this instance.</param>
      <param name="initialize">Set to <c>true</c> if all values should be initialized to 1 before the multiplication.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="subset" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Raised if this instance is read only, or if any variables are no longer sorted correctly due to modifications of the network.</exception>
      <exception cref="T:System.ArgumentException">Raised if the variables in <paramref name="subset" /> are not contained in this instance.</exception>
    </member>
    <member name="T:BayesServer.TableAccessor">
      <summary>
            Allows random access to the values in a <see cref="T:BayesServer.Table" />, using a preferred variable ordering, as opposed to the default sorted order specified in <see cref="P:BayesServer.Table.SortedVariables" />.
            </summary>
      <seealso cref="T:BayesServer.TableIterator" />
      <seealso cref="T:BayesServer.Table" />
    </member>
    <member name="M:BayesServer.TableAccessor.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableAccessor" /> class, allowing random access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed.  The last variable's states toggle fastest.</param>
      <seealso cref="T:BayesServer.TableIterator" />
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.VariableContext})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableAccessor" /> class, allowing random access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed, defined using variable contexts.  The last variable's states toggle fastest.</param>
      <seealso cref="T:BayesServer.TableIterator" />
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.#ctor(BayesServer.Table,BayesServer.VariableContextCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableAccessor" /> class, allowing random access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables.  Any times that are contained within the <see cref="T:BayesServer.VariableContextCollection" /> will be used.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed, including any timing information contained in the <see cref="T:BayesServer.VariableContextCollection" />.  The last variable's states toggle fastest.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Node},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableAccessor" /> class, allowing random access to <paramref name="table" /> with a specified <paramref name="order" /> for the node variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the node variables should be accessed.  The last variable's states toggle fastest.</param>
      <param name="times">The times for the node variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the nodes in order do not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Variable},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableAccessor" /> class, allowing random access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables at specified times.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed.  The last variable's states toggle fastest.</param>
      <param name="times">The times for the variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Node})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableAccessor" /> class, allowing random access to <paramref name="table" /> with a specified <paramref name="order" /> for the node variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the node variables should be accessed.  The last variable's states toggle fastest.</param>
      <seealso cref="T:BayesServer.TableIterator" />
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the nodes in order do not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="P:BayesServer.TableAccessor.Table">
      <summary>
            Gets the underlying <see cref="T:BayesServer.Table" />.
            </summary>
      <value>The underlying <see cref="T:BayesServer.Table" />.</value>
    </member>
    <member name="M:BayesServer.TableAccessor.CopyFrom(System.Double[])">
      <summary>
            Copies values from an array into the underlying <see cref="T:BayesServer.Table" /> using the variable ordering of the <see cref="T:BayesServer.TableAccessor" />, not the <see cref="P:BayesServer.Table.SortedVariables" />.
            </summary>
      <param name="values">An array of values to copy.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="values" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="values" /> is too short.</exception>
    </member>
    <member name="P:BayesServer.TableAccessor.Count">
      <summary>
            Gets the count of values in the underlying <see cref="T:BayesServer.Table" />.
            </summary>
      <value>The count.</value>
    </member>
    <member name="P:BayesServer.TableAccessor.Item(System.Int32[])">
      <summary>
            Gets or sets the underlying <see cref="T:BayesServer.Table" /> value, using states corresponding to the order of variables in the <see cref="T:BayesServer.TableAccessor" />.
            </summary>
      <value>The underlying <see cref="T:BayesServer.Table" /> value.</value>
    </member>
    <member name="P:BayesServer.TableAccessor.Item(System.Int32)">
      <summary>
            Gets or sets the underlying <see cref="T:BayesServer.Table" /> value, specified i.
            </summary>
      <value>The table value.</value>
    </member>
    <member name="M:BayesServer.TableAccessor.GetStates(System.Int32,System.Int32[])">
      <summary>
            Gets the states at the given position <paramref name="i" />.  The position is relative to specified variable ordering in the <see cref="T:BayesServer.TableAccessor" />.
            </summary>
      <param name="i">The position at which to retrieve the states.</param>
      <param name="states">A buffer for the states, which is overwritten by the method.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="states" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="states" /> is too short.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.GetRow(System.Int32[])">
      <summary>
            Gets the <see cref="T:BayesServer.TableAccessor" /> row for the given states.  The row is relative to the specified variable ordering in the <see cref="T:BayesServer.TableAccessor" />.
            </summary>
      <param name="states">The states.</param>
      <returns>The corresponding row in the <see cref="T:BayesServer.TableAccessor" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="states" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="states" /> length does not equal the number of variables in the <see cref="T:BayesServer.TableAccessor" />.</exception>
    </member>
    <member name="M:BayesServer.TableAccessor.GetState(System.Int32,System.Int32)">
      <summary>
            Gets the state at the given position <paramref name="i" /> for the node given by <paramref name="node" />.  The position is relative to the specified variable ordering in the <see cref="T:BayesServer.TableAccessor" />.
            </summary>
      <param name="i">The position at which to retrieve the state.</param>
      <param name="node">The node.</param>
      <returns>The state.</returns>
    </member>
    <member name="M:BayesServer.TableAccessor.GetTableIndex(System.Int32)">
      <summary>
            Gets the equivalent index in the underlying table that corresponds to the index in the accessor.
            </summary>
      <param name="i">The accessor index.</param>
      <returns>The equivalent underlying table index.</returns>
    </member>
    <member name="T:BayesServer.TableIterator">
      <summary>
            Allows sequential access to the values in a <see cref="T:BayesServer.Table" />, using a preferred variable ordering, as opposed to the default sorted order specified in <see cref="P:BayesServer.Table.SortedVariables" />.
            </summary>
      <seealso cref="T:BayesServer.TableAccessor" />
      <seealso cref="T:BayesServer.Table" />
    </member>
    <member name="M:BayesServer.TableIterator.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableIterator" /> class, allowing sequential access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed.  The last variable's states toggle fastest.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Variable},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableIterator" /> class, allowing sequential access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables at specified times.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed.  The last variable's states toggle fastest.</param>
      <param name="times">The times for the variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Node},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableIterator" /> class, allowing sequential access to <paramref name="table" /> with a specified <paramref name="order" /> for the node variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the node variables should be accessed.  The last variable's states toggle fastest.</param>
      <param name="times">The times for the variables.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the nodes in order do not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.#ctor(BayesServer.Table,BayesServer.VariableContextCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableIterator" /> class, allowing sequential access to <paramref name="table" /> with a specified <paramref name="order" /> for the variables.  Any times that are contained within the <see cref="T:BayesServer.VariableContextCollection" /> will be used.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the variables should be accessed, including any timing information contained in the <see cref="T:BayesServer.VariableContextCollection" />.  The last variable's states toggle fastest.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if order does not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.Node})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableIterator" /> class, allowing sequential access to <paramref name="table" /> with a specified <paramref name="order" /> for the node variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the node variables should be accessed.  The last variable's states toggle fastest.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the nodes in order do not contain the same variables as <paramref name="table" />.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.#ctor(BayesServer.Table,System.Collections.Generic.IList{BayesServer.VariableContext})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.TableIterator" /> class, allowing sequential access to <paramref name="table" /> with a specified <paramref name="order" /> for the node variables.
            </summary>
      <param name="table">The table whose values are to be accessed.</param>
      <param name="order">The order in which the node variables should be accessed.  The last variable's states toggle fastest.</param>
      <exception cref="T:System.ArgumentNullException">Raised if either <paramref name="table" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the variable-time combinations in order do not match those found in <paramref name="table" />.</exception>
    </member>
    <member name="P:BayesServer.TableIterator.Count">
      <summary>
            Gets the count of values in the underlying <see cref="T:BayesServer.Table" />.
            </summary>
      <value>The count.</value>
    </member>
    <member name="P:BayesServer.TableIterator.Table">
      <summary>
            Gets the underlying <see cref="T:BayesServer.Table" />.
            </summary>
      <value>The underlying <see cref="T:BayesServer.Table" />.</value>
    </member>
    <member name="M:BayesServer.TableIterator.op_Increment(BayesServer.TableIterator)">
      <summary>
            Moves the iterator to the next value, with respect to the <see cref="T:BayesServer.TableIterator" /> node order.
            </summary>
      <param name="iterator">The iterator.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="P:BayesServer.TableIterator.Value">
      <summary>
            Gets or sets the underlying <see cref="T:BayesServer.Table" /> value at the current position of the iterator.
            </summary>
      <value>The underlying <see cref="T:BayesServer.Table" /> value.</value>
    </member>
    <member name="M:BayesServer.TableIterator.Increment">
      <summary>
            Moves the iterator to the next value, with respect to the <see cref="T:BayesServer.TableIterator" /> node order.
            </summary>
    </member>
    <member name="P:BayesServer.TableIterator.Row">
      <summary>
            Gets the current position of the iterator.  For the position in the underlying <see cref="T:BayesServer.Table" /> see <see cref="P:BayesServer.TableIterator.TableRow" />.
            </summary>
      <value>The row.</value>
    </member>
    <member name="P:BayesServer.TableIterator.TableRow">
      <summary>
            Gets the position of the iterator in the underlying <see cref="T:BayesServer.Table" />.  For the position of the iterator see <see cref="P:BayesServer.TableIterator.Row" />.
            </summary>
      <value>The table row.</value>
    </member>
    <member name="M:BayesServer.TableIterator.CopyFrom(System.Double[])">
      <summary>
            Resets the iterator and then copies values from an array into the underlying <see cref="T:BayesServer.Table" /> using the variable ordering of the <see cref="T:BayesServer.TableIterator" />, not the <see cref="P:BayesServer.Table.SortedVariables" />.
            </summary>
      <remarks>At the end of the operation the iterator will be reset to the start.</remarks>
      <param name="values">An array of values to copy.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="values" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="values" /> is too short.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.Reset">
      <summary>
            Resets the iterator to the start.
            </summary>
    </member>
    <member name="M:BayesServer.TableIterator.GetStates(System.Int32[])">
      <summary>
            Gets the states of all nodes, based on the order of nodes in the <see cref="T:BayesServer.TableIterator" /> not the underlying <see cref="T:BayesServer.Table" />.
            </summary>
      <param name="states">A array, whose values will be replaced.  The <paramref name="states" /> array must have length equal to or greater than the node count in the underlying <see cref="T:BayesServer.Table" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="states" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if <paramref name="states" /> is too short.</exception>
    </member>
    <member name="M:BayesServer.TableIterator.GetState(System.Int32)">
      <summary>
            Gets the state for an individual node indexed by the order of nodes in the <see cref="T:BayesServer.TableIterator" />.
            </summary>
      <param name="i">The node position, based on the order of nodes in the <see cref="T:BayesServer.TableIterator" />.</param>
      <returns>The state.</returns>
    </member>
    <member name="T:BayesServer.TemporalType">
      <summary>
            The node type for networks that include temporal/sequential support.  I.e. Dynamic Bayesian Networks (DBN).
            </summary>
    </member>
    <member name="F:BayesServer.TemporalType.Contemporal">
      <summary>
            A standard node that is not repeated at each time step.
            </summary>
      <remarks>
            If a <see cref="F:BayesServer.TemporalType.Contemporal" /> node has an outgoing link to a <see cref="F:BayesServer.TemporalType.Temporal" /> node, it is equivalent to the single Contemporal node
            having an outgoing link to the Temporal node at each time slice.
            </remarks>
    </member>
    <member name="F:BayesServer.TemporalType.Temporal">
      <summary>
            A temporal node, which can be queried or have evidence set at each time step.
            </summary>
    </member>
    <member name="F:BayesServer.TemporalType.Initial">
      <summary>
            A node which cannot link to temporal nodes at time t &gt; 0.
            </summary>
      <remarks>If an <see cref="F:BayesServer.TemporalType.Initial" /> node links to a <see cref="F:BayesServer.TemporalType.Temporal" /> node then the link is only valid for t=0.</remarks>
    </member>
    <member name="F:BayesServer.TemporalType.Terminal">
      <summary>
            A node which cannot link to temporal nodes except for the last time slice.
            </summary>
    </member>
    <member name="T:BayesServer.TopologicalSort">
      <summary>
            Contains methods to sort nodes in a Bayesian network in topological order.
            </summary>
    </member>
    <member name="M:BayesServer.TopologicalSort.Sort(BayesServer.Network)">
      <summary>
            Returns the nodes in a Bayesian network sorted in topological order.
            </summary>
      <param name="network">The Bayesian network.</param>
      <returns>The nodes sorted in topological order.</returns>
    </member>
    <member name="T:BayesServer.Unroller">
      <summary>
            Unrolls a Dynamic Bayesian network into the equivalent Bayesian network. 
            </summary>
    </member>
    <member name="M:BayesServer.Unroller.Unroll(BayesServer.Network,System.Int32,BayesServer.UnrollOptions)">
      <summary>
            Unrolls the specified Dynamic Bayesian network into the equivalent Bayesian network.
            </summary>
      <param name="network">The Dynamic Bayesian network.</param>
      <param name="sliceCount">The slice count (number of time slices).</param>
      <param name="options">Options that govern the unroll operation.</param>
      <returns>The unrolled network along with additional information.</returns>
    </member>
    <member name="T:BayesServer.UnrollOptions">
      <summary>
            Options governing the unrolling of a Dynamic Bayesian network.
            </summary>
      <seealso cref="T:BayesServer.Unroller" />
    </member>
    <member name="E:BayesServer.UnrollOptions.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.UnrollOptions.SliceGap">
      <summary>
            Gets or sets the gap between time slices.
            </summary>
      <value>The gap between time slices.</value>
    </member>
    <member name="P:BayesServer.UnrollOptions.NodeWidthOverride">
      <summary>
            Gets or sets a value that can be used to override the width of nodes, used when laying out nodes.
            </summary>
      <value>Value to override node widths.</value>
    </member>
    <member name="T:BayesServer.UnrollOutput">
      <summary>
            Contains information returned by <see cref="M:BayesServer.Unroller.Unroll" />.
            </summary>
    </member>
    <member name="P:BayesServer.UnrollOutput.Dbn">
      <summary>
            Gets the Dynamic Bayesian network before it was unrolled.
            </summary>
      <value>The Dynamic Bayesian network.</value>
    </member>
    <member name="P:BayesServer.UnrollOutput.Unrolled">
      <summary>
            Gets the unrolled Dynamic Bayesian network.
            </summary>
    </member>
    <member name="P:BayesServer.UnrollOutput.SliceCount">
      <summary>
            Gets the slice count of the unrolled network.
            </summary>
      <value>The slice count.</value>
    </member>
    <member name="M:BayesServer.UnrollOutput.GetDbnVariable(BayesServer.Variable)">
      <summary>
            Maps from a variable in the unrolled network to the corresponding variable in the original Dynamic Bayesian network.
            </summary>
      <param name="unrolledVariable">The unrolled variable.</param>
      <returns>The variable in the original Dynamic Bayesian network.</returns>
    </member>
    <member name="M:BayesServer.UnrollOutput.GetDbnVariable(BayesServer.Variable,System.Nullable{System.Int32}@)">
      <summary>
            Maps from a variable in the unrolled network to the corresponding variable in the original Dynamic Bayesian network.
            </summary>
      <param name="unrolledVariable">The unrolled variable.</param>
      <param name="time">The time that the unrolled variable corresponds to in the original Dynamic Bayesian network.</param>
      <returns>The variable in the original Dynamic Bayesian network.</returns>
    </member>
    <member name="M:BayesServer.UnrollOutput.GetDbnNode(BayesServer.Node)">
      <summary>
            Maps from a node in the unrolled network to the corresponding node in the original Dynamic Bayesian network.
            </summary>
      <param name="unrolledNode">The unrolled node.</param>
      <returns>The node in the original Dynamic Bayesian network.</returns>
    </member>
    <member name="M:BayesServer.UnrollOutput.GetDbnNode(BayesServer.Node,System.Nullable{System.Int32}@)">
      <summary>
            Maps from a node in the unrolled network to the corresponding node in the original Dynamic Bayesian network.
            </summary>
      <param name="unrolledNode">The unrolled node.</param>
      <param name="time">The time that the unrolled node represents.</param>
      <returns>The node in the original Dynamic Bayesian network.</returns>
    </member>
    <member name="M:BayesServer.UnrollOutput.GetUnrolledNode(BayesServer.Node,System.Nullable{System.Int32})">
      <summary>
            Maps between a node in the original Dynamic Bayesian network, and the corresponding node in the unrolled network.
            </summary>
      <param name="dbnNode">The node in the original Dynamic Bayesian network.</param>
      <param name="time">The time at which to retrieve the corresponding unrolled node.</param>
      <returns>The node in the unrolled network.</returns>
    </member>
    <member name="M:BayesServer.UnrollOutput.GetUnrolledVariable(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Maps between a variable in the original Dynamic Bayesian network, and the corresponding variable in the unrolled network.
            </summary>
      <param name="dbnVariable">The variable in the original Dynamic Bayesian network.</param>
      <param name="time">The time at which to retrieve the corresponding unrolled variable.</param>
      <returns>The variable in the unrolled network.</returns>
    </member>
    <member name="T:BayesServer.ValidationOptions">
      <summary>
            Represents options that govern the validation of a network.  See <see cref="M:BayesServer.Network.Validate" />.
            </summary>
    </member>
    <member name="P:BayesServer.ValidationOptions.AllowNullDistributions">
      <summary>
            Determines whether validation should succeed even if the required distribution(s) have not been assigned to a node.  Default value is false.
            </summary>
      <remarks>Temporal nodes (Dynamic Bayesian networks) may require multiple distributions to be specified.</remarks>
    </member>
    <member name="T:BayesServer.Variable">
      <summary>
            Represents a discrete or continuous random variable.
            </summary>
      <remarks>
            Note that variable names must be unique per network, and are case sensitive.
            <para>
            A <see cref="T:BayesServer.Node">Node</see> in a Bayesian network can contain one or more variables.</para><para>Although a discrete variable can contain a different number of <see cref="T:BayesServer.State">states</see>, a continuous variable always contains a single state.</para></remarks>
    </member>
    <member name="E:BayesServer.Variable.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="M:BayesServer.Variable.FindStateByValue(System.Object)">
      <summary>
            Finds a state based on a state value.  E.g. finds the state who's interval contains the supplied value, or who's integer state value matches the supplied integer.
            </summary>
      <param name="value">The value to test against state values.  Type will depend on StateValueType.  e.g. pass a double if the state value type is a double interval.</param>
      <returns>The matching state or null.</returns>
    </member>
    <member name="M:BayesServer.Variable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class, with <see cref="T:BayesServer.VariableValueType" /> discrete and zero states.
            </summary>
    </member>
    <member name="M:BayesServer.Variable.CompareTo(BayesServer.Variable)">
      <inheritdoc />
    </member>
    <member name="P:BayesServer.Variable.StateValueType">
      <summary>
            Gets or sets the type of value that states belonging to this variable can represent.  For example an interval.
            </summary>
    </member>
    <member name="M:BayesServer.Variable.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A new <see cref="T:BayesServer.Variable" /> instance.</returns>
    </member>
    <member name="P:BayesServer.Variable.CustomProperties">
      <summary>
            Gets custom properties associated with this instance.
            </summary>
      <remarks>
            Custom properties allow storage of custom information, which will be saved with the network.
            </remarks>
    </member>
    <member name="M:BayesServer.Variable.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class, with <see cref="T:BayesServer.VariableValueType" /> discrete, zero states, and the specified name.
            </summary>
      <param name="name">The name of the variable.  Can be null.</param>
    </member>
    <member name="M:BayesServer.Variable.#ctor(System.String,BayesServer.VariableValueType,BayesServer.VariableKind)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class with the specified name, kind and value type.  If discrete, no states are added.
            </summary>
      <param name="name">The name of the variable.  Can be null.</param>
      <param name="valueType">The value type, e.g. continuous or discrete.</param>
      <param name="kind">The kind of Variable, e.g. Probability, Decision or Utility.</param>
    </member>
    <member name="M:BayesServer.Variable.#ctor(System.String,BayesServer.VariableValueType)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class with the specified name and value type.  If discrete, no states are added.
            </summary>
      <param name="name">The name of the variable.  Can be null.</param>
      <param name="valueType">The value type, e.g. continuous or discrete.</param>
    </member>
    <member name="M:BayesServer.Variable.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class, with <see cref="T:BayesServer.VariableValueType" /> discrete and the specified <paramref name="name" /> and adds the number of states specified in <paramref name="states" />.
            </summary>
      <param name="name">The name to give the Variable, which can be null or empty.</param>
      <param name="states">The number of states to add to the Variable.  States will be given default names.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Raised when the <paramref name="states" /> parameter is less than zero.</exception>
    </member>
    <member name="M:BayesServer.Variable.#ctor(System.String,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class, with <see cref="T:BayesServer.VariableValueType" /> discrete and the specified name and adds the states specified in <paramref name="states" />.
            </summary>
      <param name="name">The name of the node and variable.</param>
      <param name="states">The states to add to the associated <see cref="T:BayesServer.Variable" />, specified by their names.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="states" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised when the names in <paramref name="states" /> are not unique, or are null or empty.</exception>
    </member>
    <member name="M:BayesServer.Variable.#ctor(System.String,BayesServer.State[])">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.Variable" /> class, with <see cref="T:BayesServer.VariableValueType" /> discrete and the specified name and adds the states specified in <paramref name="states" />.
            </summary>
      <param name="name">The name of the node and variable.</param>
      <param name="states">The states to add to the associated <see cref="T:BayesServer.Variable" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="states" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised when the names in <paramref name="states" /> are not unique, or are null or empty.</exception>
    </member>
    <member name="P:BayesServer.Variable.Description">
      <summary>
            An optional description for the variable.
            </summary>
    </member>
    <member name="P:BayesServer.Variable.ValueType">
      <summary>
            Gets the variable's value type, e.g. continuous or discrete.
            </summary>
      <value>The variable's value type.</value>
    </member>
    <member name="P:BayesServer.Variable.Kind">
      <summary>
            Gets the kind of variable, such as Probability, Decision or Utility.
            </summary>
    </member>
    <member name="P:BayesServer.Variable.States">
      <summary>
            Returns the collection of states belonging to the variable.
            </summary>
      <remarks>Continuous variables always have a single state.</remarks>
      <seealso cref="T:BayesServer.State" />
    </member>
    <member name="M:BayesServer.Variable.ToString">
      <summary>
            Returns the name of the variable, or an empty string if the name is null.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing the name of the variable which is empty if the name is null.
            </returns>
    </member>
    <member name="P:BayesServer.Variable.Node">
      <summary>
            Gets the <see cref="T:BayesServer.Node" /> this instance belongs to, if any.
            </summary>
      <value>The node the instance belongs to, if any.</value>
    </member>
    <member name="P:BayesServer.Variable.Name">
      <summary>
            Gets or sets the name of the variable.
            </summary>
      <remarks>When a variable is added to a network, its name must be unique.  Comparisons are case sensitive.</remarks>
    </member>
    <member name="P:BayesServer.Variable.Index">
      <summary>
            The Index of this instance in the collection of variables belonging to a network, or -1 if the variable does not belong to a node and hence a network.
            </summary>
    </member>
    <member name="T:BayesServer.VariableContext">
      <summary>
            Represents a variable and associated information such as time, and whether it is marked as head or tail.
            </summary>
      <remarks>
            A <see cref="T:BayesServer.VariableContext" /> is used to store contextual information about a variable in a distribution,
            such as whether it is marked as head or tail, and time if the variable belongs to a temporal node.
            The same variable can appear more than once in a distribution if it appears at different times.
            </remarks>
    </member>
    <member name="M:BayesServer.VariableContext.#ctor(BayesServer.VariableContext)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableContext" /> class, copying an existing instance.
            </summary>
      <param name="variableContext">The variable context to copy.</param>
    </member>
    <member name="M:BayesServer.VariableContext.#ctor(BayesServer.Variable)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableContext" /> class.  Time defaults to null and HeadTail to Head.
            </summary>
      <param name="variable">The variable.</param>
    </member>
    <member name="M:BayesServer.VariableContext.#ctor(BayesServer.Variable,BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableContext" /> class.  Time defaults to null.
            </summary>
      <param name="variable">The variable.</param>
      <param name="headTail">Indicates whether the variable is marked as head or tail.</param>
    </member>
    <member name="M:BayesServer.VariableContext.#ctor(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableContext" /> class.  HeadTail defaults to Head.
            </summary>
      <param name="variable">The variable.</param>
      <param name="time">The time associated with the variable.  Can be null.</param>
    </member>
    <member name="M:BayesServer.VariableContext.#ctor(BayesServer.Variable,System.Nullable{System.Int32},BayesServer.HeadTail)">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableContext" /> class.
            </summary>
      <param name="variable">The variable.</param>
      <param name="time">The time associated with the variable.  Can be null.</param>
      <param name="headTail">Indicates whether the variable is marked as head or tail.</param>
    </member>
    <member name="P:BayesServer.VariableContext.HeadTail">
      <summary>
            Specifies whether the variable is marked as Head or Tail.
            </summary>
      <value>Specified either Head or Tail.</value>
      <seealso cref="T:BayesServer.HeadTail" />
    </member>
    <member name="P:BayesServer.VariableContext.Variable">
      <summary>
            Gets the variable.
            </summary>
      <value>The variable.</value>
    </member>
    <member name="P:BayesServer.VariableContext.Time">
      <summary>
            Gets the time associated with the variable if it belongs to a temporal node.
            </summary>
      <value>The time associated with the variable.  Null if the variable does not belong to a temporal node.</value>
    </member>
    <member name="M:BayesServer.VariableContext.IsHead">
      <summary>
            Determines whether this instance is marked as Head.
            </summary>
      <returns>
        <c>true</c> if this instance is marked as Head; otherwise, <c>false</c>.
            </returns>
      <seealso cref="T:BayesServer.HeadTail" />
    </member>
    <member name="M:BayesServer.VariableContext.IsTail">
      <summary>
            Determines whether this instance is marked as Tail.
            </summary>
      <returns>
        <c>true</c> if this instance is marked as Tail; otherwise, <c>false</c>.
            </returns>
      <seealso cref="T:BayesServer.HeadTail" />
    </member>
    <member name="T:BayesServer.VariableContextCollection">
      <summary>
            Represents a read-only collection of variables.
            </summary>
      <remarks>Each variable in the collection may have an associated time if the Bayesian network is a
            Dynamic Bayesian network (DBN).  A variable can only appear more than once in the collection
            if it has different times associated.
            All variables are marked as either head or tail.  Head variables are those on the left,
            and tail variables are those on the right in the expression P(A|B).</remarks>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:BayesServer.VariableContextCollection.Count">
      <summary>
            Gets the number of elements contained in the collection.
            </summary>
    </member>
    <member name="M:BayesServer.VariableContextCollection.IndexOf(BayesServer.Variable)">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.Variable" /> in the collection.
            </summary>
      <param name="item">The variable to find.  The value can be null.</param>
      <returns>The index of the variable or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.IndexOf(BayesServer.VariableContext,System.Boolean)">
      <summary>
            Determines the index of a specific variable-time combination in the collection.
            </summary>
      <param name="variableContext">The variable context to match.</param>
      <param name="ignoreHeadTail">When true, the Head and Tail specifications need not match.</param>
      <returns>The index of the variable or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.IndexOf(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Determines the index of a specific <see cref="T:BayesServer.Variable" /> in the collection at the specified <paramref name="time" />.
            </summary>
      <param name="variable">The variable to find.</param>
      <param name="time">The variable time.  Can be null for non temporal variables.</param>
      <returns>The index of the variable or -1 if not found.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.Contains(BayesServer.Variable)">
      <summary>
            Determines whether a <see cref="T:BayesServer.Variable" /> is in the collection.
            </summary>
      <param name="variable">The <see cref="T:BayesServer.Variable" /> to locate in the collection. The value can be null.</param>
      <returns>true if <paramref name="variable" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.Contains(BayesServer.VariableContext,System.Boolean)">
      <summary>
            Determines whether a variable-time (and optionally Head/Tail) combination is contained in the collection.
            </summary>
      <param name="variableContext">The variableContext to match.</param>
      <param name="ignoreHeadTail">When true, the Head and Tail specifications need not match.</param>
      <returns>True if a match is found; false otherwise.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.Contains(BayesServer.Variable,System.Nullable{System.Int32})">
      <summary>
            Determines whether a <see cref="T:BayesServer.Variable" /> is in the collection at the specified <paramref name="time" />.
            </summary>
      <param name="variable">The <see cref="T:BayesServer.Variable" /> to locate in the collection. The value can be null.</param>
      <param name="time">The time associated with the variable, if any.  Can be null.</param>
      <returns>true if <paramref name="variable" /> is found in the collection; otherwise, false.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ContainsAll(System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Determines whether all <paramref name="items" /> are matched in the collection.
            </summary>
      <param name="items">The items to locate in the collection. Cannot be null.</param>
      <returns>true if all items were matched in the collection; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ContainsAll(System.Collections.Generic.IList{BayesServer.Variable},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Determines whether all <paramref name="items" /> are matched in the collection.
            </summary>
      <param name="items">The items to locate in the collection. Cannot be null.</param>
      <param name="times">The times associated with <paramref name="items" />.  Can be null.</param>
      <returns>true if all items were matched in the collection; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ContainsAll(System.Collections.Generic.IList{BayesServer.VariableContext},System.Boolean)">
      <summary>
            Determines whether all <paramref name="items" /> are matched in the collection at the specified times.
            </summary>
      <param name="items">The items to locate in the collection. Cannot be null.</param>
      <param name="ignoreHeadTail">When true, head and tail specifications need not match.</param>
      <returns>true if all items were matched in the collection; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ContainsAll(BayesServer.VariableContextCollection,System.Boolean)">
      <summary>
            Determines whether all <paramref name="items" /> are matched in the collection.
            </summary>
      <param name="items">The items to locate in the collection. Cannot be null.</param>
      <param name="ignoreHeadTail">When true, the Head and Tail specifications need not match.</param>
      <returns>true if all items were matched in the collection; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ContainsAny(BayesServer.VariableContextCollection,System.Boolean)">
      <summary>
            Determines whether any <paramref name="items" /> are matched in the collection.
            </summary>
      <param name="items">The items to locate in the collection. Cannot be null.</param>
      <param name="ignoreHeadTail">When true, the Head and Tail specifications need not match.</param>
      <returns>true if any items were matched in the collection; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:BayesServer.VariableContextCollection.ContainsAny(System.Collections.Generic.IList{BayesServer.Variable},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Determines whether any <paramref name="items" /> are matched in the collection.
            </summary>
      <param name="items">The items to locate in the collection. Cannot be null.</param>
      <param name="times">The time for each variable.  Each time can be null for non temporal variables.  <paramref name="times" /> can be null.</param>
      <returns>true if any items were matched in the collection; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="items" /> is null.</exception>
    </member>
    <member name="P:BayesServer.VariableContextCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:BayesServer.Variable" /> object at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:BayesServer.Variable" /> to find.</param>
      <returns>A <see cref="T:BayesServer.Variable" />.</returns>
    </member>
    <member name="M:BayesServer.VariableContextCollection.CopyTo(BayesServer.VariableContext[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:BayesServer.VariableContextCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:BayesServer.VariableContextCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the entire <see cref="T:BayesServer.VariableContextCollection" />.</returns>
    </member>
    <member name="T:BayesServer.VariableKind">
      <summary>
            The kind of variable, such as Probability, Decision or Utility.
            </summary>
    </member>
    <member name="F:BayesServer.VariableKind.Probability">
      <summary>
            A standard probability variable.
            </summary>
    </member>
    <member name="F:BayesServer.VariableKind.Decision">
      <summary>
            A decision variable, which can be used for decision making based on utilities.
            </summary>
    </member>
    <member name="F:BayesServer.VariableKind.Utility">
      <summary>
            A utility variable, which can be used to encode utilities such as costs and profits.
            </summary>
    </member>
    <member name="T:BayesServer.VariableMap">
      <summary>
            Maps between a custom variable order and the default sorted variable order.
            </summary>
      <seealso cref="P:BayesServer.IDistribution.SortedVariables" />
    </member>
    <member name="M:BayesServer.VariableMap.#ctor(BayesServer.VariableContextCollection,System.Collections.Generic.IList{BayesServer.Variable})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableMap" /> class.
            </summary>
      <param name="sortedVariables">The sorted variables.</param>
      <param name="order">The  custom order, without times.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="sortedVariables" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the elements in <paramref name="order" /> are not found in <paramref name="sortedVariables" />.</exception>
    </member>
    <member name="M:BayesServer.VariableMap.#ctor(BayesServer.VariableContextCollection,System.Collections.Generic.IList{BayesServer.VariableContext})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableMap" /> class.
            </summary>
      <param name="sortedVariables">The sorted variables.</param>
      <param name="order">The custom order defined using variable contexts.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="sortedVariables" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the elements in <paramref name="order" /> are not found in <paramref name="sortedVariables" />.</exception>
    </member>
    <member name="M:BayesServer.VariableMap.#ctor(BayesServer.VariableContextCollection,System.Collections.Generic.IList{BayesServer.Variable},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableMap" /> class.
            </summary>
      <param name="sortedVariables">The sorted variables.</param>
      <param name="order">The custom order.</param>
      <param name="times">The times associated with the variables in <paramref name="order" />.  Each entry can be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="sortedVariables" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the elements in <paramref name="order" /> are not found in <paramref name="sortedVariables" />.</exception>
    </member>
    <member name="M:BayesServer.VariableMap.#ctor(BayesServer.VariableContextCollection,System.Collections.Generic.IList{BayesServer.Node})">
      <summary>
            Initializes a new instance of the <see cref="T:BayesServer.VariableMap" /> class.
            </summary>
      <param name="sortedVariables">The sorted variables.</param>
      <param name="order">The custom order, specified by nodes without times.  If each node does not contain a single variable, use a different constructor.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="sortedVariables" /> or <paramref name="order" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised if the elements in <paramref name="order" /> are not found in <paramref name="sortedVariables" />.</exception>
    </member>
    <member name="P:BayesServer.VariableMap.Item(System.Int32)">
      <summary>
            Maps between the custom order and the sorted collection.
            </summary>
      <param name="orderIndex">Index of the variable in the custom order.</param>
      <returns>The index of the variable in the sorted collection.</returns>
    </member>
    <member name="T:BayesServer.VariableValueType">
      <summary>
            The type of data represented by a <see cref="T:BayesServer.Variable" />.
            </summary>
    </member>
    <member name="F:BayesServer.VariableValueType.Discrete">
      <summary>
            Discrete/Categorical/Nominal data.  E.g. Gender = {Male, Female}
            </summary>
    </member>
    <member name="F:BayesServer.VariableValueType.Continuous">
      <summary>
            Continuous data. E.g. Stock price.
            </summary>
    </member>
  </members>
</doc>